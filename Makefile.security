# Security Makefile for Ephemos
# Handles security scanning, validation, tooling, SBOM generation, and fuzzing
.PHONY: security-scan security-tools security-hooks security-all audit-config sbom-generate sbom-validate sbom-all fuzz fuzz-short fuzz-extended

# Security scanning targets
security-scan:
	@echo "üîç Running security scans..."
	@./scripts/security/scan-secrets.sh
	@./scripts/security/scan-vulnerabilities.sh
	@echo "Security scans completed!"

# Install security tools (requires script validation)
security-tools:
	@echo "üõ†Ô∏è Installing security tools..."
	@./scripts/security/install-tools.sh
	@echo "Security tools installed!"

# Setup Git security hooks
security-hooks:
	@echo "ü™ù Setting up Git security hooks..."
	@./scripts/security/setup-hooks.sh
	@echo "Security hooks installed!"

# Complete security setup
security-all: security-tools security-hooks security-scan
	@echo "üîí Complete security setup finished!"

# Audit configuration files
audit-config:
	@echo "üìã Auditing configuration files..."
	@./scripts/security/audit-config.sh
	@echo "Configuration audit completed!"

# Validate production configuration
validate-production: build
	@echo "üè≠ Validating production configuration..."
	@./scripts/security/validate-production.sh
	@echo "Production validation completed!"

# SBOM Generation targets
sbom-generate: build
	@echo "üìã Generating Software Bill of Materials (SBOM)..."
	@./scripts/security/generate-sbom.sh
	@echo "SBOM generation completed!"

# Validate generated SBOMs
sbom-validate:
	@echo "‚úÖ Validating SBOM files..."
	@./scripts/security/validate-sbom.sh
	@echo "SBOM validation completed!"

# Complete SBOM workflow
sbom-all: sbom-generate sbom-validate
	@echo "üìã Complete SBOM workflow finished!"

# Fuzzing targets for security testing
fuzz:
	@echo "üîç Running comprehensive fuzzing tests..."
	@echo "Duration: 1 minute per test (use 'make fuzz-extended' for longer runs)"
	@go test -fuzz=FuzzResolveConfigPath -fuzztime=1m ./pkg/ephemos/ || echo "FuzzResolveConfigPath completed"
	@go test -fuzz=FuzzValidateFileAccess -fuzztime=1m ./pkg/ephemos/ || echo "FuzzValidateFileAccess completed"
	@go test -fuzz=FuzzYAMLParsing -fuzztime=1m ./pkg/ephemos/ || echo "FuzzYAMLParsing completed"
	@go test -fuzz=FuzzConfigValidation -fuzztime=1m ./pkg/ephemos/ || echo "FuzzConfigValidation completed"
	@go test -fuzz=FuzzServiceName -fuzztime=1m ./pkg/ephemos/ || echo "FuzzServiceName completed"
	@go test -fuzz=FuzzTransportAddress -fuzztime=1m ./pkg/ephemos/ || echo "FuzzTransportAddress completed"
	@go test -fuzz=FuzzSPIFFESocketPath -fuzztime=1m ./pkg/ephemos/ || echo "FuzzSPIFFESocketPath completed"
	@go test -fuzz=FuzzTransportType -fuzztime=1m ./pkg/ephemos/ || echo "FuzzTransportType completed"
	@go test -fuzz=FuzzIdentityParsing -fuzztime=1m ./pkg/ephemos/ || echo "FuzzIdentityParsing completed"
	@go test -fuzz=FuzzTrustDomain -fuzztime=1m ./pkg/ephemos/ || echo "FuzzTrustDomain completed"
	@go test -fuzz=FuzzClientAuthorization -fuzztime=1m ./pkg/ephemos/ || echo "FuzzClientAuthorization completed"
	@go test -fuzz=FuzzServerTrusts -fuzztime=1m ./pkg/ephemos/ || echo "FuzzServerTrusts completed"
	@go test -fuzz=FuzzContextTimeout -fuzztime=1m ./pkg/ephemos/ || echo "FuzzContextTimeout completed"
	@echo "‚úÖ Comprehensive fuzzing completed!"

# Quick fuzzing for CI/development
fuzz-short:
	@echo "üîç Running quick fuzzing tests (30s each)..."
	@go test -fuzz=FuzzConfigValidation -fuzztime=30s ./pkg/ephemos/ || echo "Quick config fuzzing completed"
	@go test -fuzz=FuzzServiceName -fuzztime=30s ./pkg/ephemos/ || echo "Quick service name fuzzing completed"
	@go test -fuzz=FuzzIdentityParsing -fuzztime=30s ./pkg/ephemos/ || echo "Quick identity fuzzing completed"
	@echo "‚úÖ Quick fuzzing completed!"

# Extended fuzzing for comprehensive security testing
fuzz-extended:
	@echo "üîç Running extended fuzzing tests (10 minutes each)..."
	@echo "‚ö†Ô∏è  This will take a while - perfect for overnight security testing"
	@go test -fuzz=FuzzResolveConfigPath -fuzztime=10m ./pkg/ephemos/ || echo "Extended FuzzResolveConfigPath completed"
	@go test -fuzz=FuzzYAMLParsing -fuzztime=10m ./pkg/ephemos/ || echo "Extended FuzzYAMLParsing completed"
	@go test -fuzz=FuzzConfigValidation -fuzztime=10m ./pkg/ephemos/ || echo "Extended FuzzConfigValidation completed"
	@go test -fuzz=FuzzServiceName -fuzztime=10m ./pkg/ephemos/ || echo "Extended FuzzServiceName completed"
	@go test -fuzz=FuzzIdentityParsing -fuzztime=10m ./pkg/ephemos/ || echo "Extended FuzzIdentityParsing completed"
	@echo "‚úÖ Extended fuzzing completed!"

# Fuzzing with coverage analysis
fuzz-coverage: build
	@echo "üìä Running fuzzing with coverage analysis..."
	@go test -fuzz=FuzzConfigValidation -fuzztime=2m -coverprofile=fuzz-coverage.out ./pkg/ephemos/ || echo "Coverage fuzzing completed"
	@go tool cover -html=fuzz-coverage.out -o fuzz-coverage.html || echo "Coverage report generated"
	@echo "üìà Fuzzing coverage report: fuzz-coverage.html"

# Help
security-help:
	@echo "Ephemos Security Targets:"
	@echo ""
	@echo "  make security-scan     - Run all security scans"
	@echo "  make security-tools    - Install security tools"
	@echo "  make security-hooks    - Setup Git security hooks"
	@echo "  make security-all      - Complete security setup"
	@echo "  make audit-config      - Audit configuration files"
	@echo "  make validate-production - Validate production config"
	@echo ""
	@echo "SBOM Generation:"
	@echo "  make sbom-generate     - Generate SBOM files (SPDX + CycloneDX)"
	@echo "  make sbom-validate     - Validate generated SBOM files"
	@echo "  make sbom-all          - Complete SBOM generation and validation"