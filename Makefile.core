# Core Makefile for Ephemos
# Handles essential build, test, and development tasks

# Build variables for reproducible builds
VERSION ?= $(shell git describe --tags --always --dirty 2>/dev/null || echo "dev")
COMMIT_HASH ?= $(shell git rev-parse --short HEAD 2>/dev/null || echo "unknown")
BUILD_TIME ?= $(shell date -u +"%Y-%m-%dT%H:%M:%SZ")
BUILD_USER ?= $(shell whoami)
BUILD_HOST ?= $(shell hostname)

# Go build flags for reproducible builds
LDFLAGS := -X main.Version=$(VERSION) \
           -X main.CommitHash=$(COMMIT_HASH) \
           -X main.BuildTime=$(BUILD_TIME) \
           -X main.BuildUser=$(BUILD_USER) \
           -X main.BuildHost=$(BUILD_HOST)

GO_BUILD_FLAGS := -trimpath -ldflags "$(LDFLAGS)"

# Variables
CLI_BINARY := ephemos
CONFIG_VALIDATOR_BINARY := config-validator

# PHONY targets - all targets that don't create files
.PHONY: all build proto proto-ci test clean deps fmt lint help setup \
        check-deps install-deps install-deps-sudo benchmark fmt-only core-help version show-build-info \
        arch-test arch-guard fuzz fuzz-build

# Default target
all: proto build

# Build library and CLI with reproducible builds
build: check-deps show-build-info
	@echo "Building Ephemos CLI with reproducible build flags..."
	@mkdir -p bin
	go build $(GO_BUILD_FLAGS) -v -o "bin/$(CLI_BINARY)" ./cmd/ephemos-cli
	go build $(GO_BUILD_FLAGS) -v -o "bin/$(CONFIG_VALIDATOR_BINARY)" ./cmd/config-validator
	@echo "Build completed!"
	@echo "Binaries built with version: $(VERSION)"

# Generate protobuf code
proto: check-deps
	@echo "Generating protobuf code..."
	@mkdir -p "$(GO_OUT)"
	@./scripts/build/generate-proto.sh "$(PROTO_DIR)" "$(GO_OUT)"

# CI-friendly protobuf generation (doesn't fail on missing protoc)
proto-ci:
	@echo "Generating protobuf code (CI mode)..."
	@mkdir -p "$(GO_OUT)"
	@./scripts/generate-proto-ci.sh "$(PROTO_DIR)" "$(GO_OUT)" || { \
		echo "‚ö†Ô∏è  Protobuf generation failed in CI mode"; \
		echo "üí° This might be expected in some CI environments"; \
		echo "üí° Ensure your CI setup includes protoc installation"; \
		exit 0; \
	}

# Build example applications with reproducible builds

# Run tests
test: check-deps
	@echo "Running tests..."
	go test -v ./...
	@echo "Tests completed!"

# Run benchmarks
benchmark: check-deps
	@echo "Running benchmarks..."
	@./scripts/benchmark.sh

# Get dependencies
deps:
	@echo "Getting dependencies..."
	go mod download
	go mod tidy
	@echo "Dependencies updated!"

# Format code
fmt:
	@echo "Formatting code..."
	go fmt ./...
	@echo "Code formatted!"

# Lint code
lint:
	@echo "Linting code..."
	@./scripts/build/lint.sh
	@echo "Linting completed!"

# Format code only (no build validation)
fmt-only:
	@echo "Formatting code..."
	@./scripts/build/lint-format-only.sh
	@echo "Formatting completed!"

# Clean build artifacts
clean:
	@echo "Cleaning build artifacts..."
	rm -rf bin/
	rm -f "$(GO_OUT)"/*.pb.go
	@echo "Clean completed!"

# Show build information
show-build-info:
	@echo "Build Information:"
	@echo "=================="
	@echo "Version:     $(VERSION)"
	@echo "Commit:      $(COMMIT_HASH)"
	@echo "Build Time:  $(BUILD_TIME)"
	@echo "Build User:  $(BUILD_USER)"
	@echo "Build Host:  $(BUILD_HOST)"
	@echo "Go Flags:    $(GO_BUILD_FLAGS)"
	@echo ""

# Show version only
version:
	@echo "$(VERSION)"

# Help
core-help:
	@echo "Core Ephemos Build Targets:"
	@echo ""
	@echo "Build targets (with reproducible builds):"
	@echo "  make build          - Build library and CLI with version info"
	@echo "  make clean          - Clean build artifacts"
	@echo ""
	@echo "Development targets:"
	@echo "  make setup          - Smart setup (checks deps, installs Go tools)"
	@echo "  make install-deps   - Install Go tools only (no sudo required)"
	@echo "  make install-deps-sudo - Install all deps including system packages (requires sudo)"
	@echo "  make check-deps     - Check if all dependencies are installed"
	@echo "  make test           - Run tests"
	@echo "  make benchmark      - Run benchmarks"
	@echo "  make deps           - Get/update Go dependencies"
	@echo "  make fmt            - Format code"
	@echo "  make fmt-only       - Format code only (no validation)"
	@echo "  make lint           - Lint code"
	@echo ""
	@echo "Protobuf targets:"
	@echo "  make proto          - Generate protobuf code"
	@echo "  make proto-ci       - Generate protobuf code (CI-friendly)"
	@echo ""
	@echo "Information targets:"
	@echo "  make version        - Show version"
	@echo "  make show-build-info- Show detailed build information"
	@echo "  make help           - Show this help"

# Development setup targets
setup:
	@echo "üîß Setting up Ephemos development environment..."
	@echo "==========================================="
	@if ./scripts/check-deps.sh; then \
		echo ""; \
		echo "üéâ All dependencies are already available!"; \
		echo "You can now run: make build"; \
	else \
		echo ""; \
		echo "üîß Installing Go tools (no sudo required)..."; \
		if ./scripts/install-deps.sh; then \
			echo ""; \
			if ./scripts/check-deps.sh >/dev/null 2>&1; then \
				echo "üéâ Development environment setup complete!"; \
				echo "You can now run: make build"; \
			else \
				echo "üîß Setup partially complete. System packages still needed."; \
				echo "For system packages (protoc), run: ./scripts/install-deps-sudo.sh"; \
				echo "Or install manually and run 'make setup' again"; \
			fi; \
		else \
			echo ""; \
			echo "‚ö†Ô∏è  Go tools installation had issues."; \
			echo "Please check the output above and resolve any errors."; \
			echo "Then run 'make setup' again"; \
		fi; \
	fi

check-deps:
	@echo "üîç Checking development dependencies..."
	@if ./scripts/check-deps.sh; then \
		echo "‚úÖ All dependencies available"; \
	else \
		echo ""; \
		echo "üîß Missing dependencies detected. Installing Go tools automatically..."; \
		if ./scripts/ensure-protoc.sh; then \
			echo "‚úÖ Go protobuf tools installed successfully"; \
		else \
			echo ""; \
			echo "‚ö†Ô∏è  Some dependencies missing. Build may fail."; \
			if [ "${CI:-}" = "true" ] || [ "${GITHUB_ACTIONS:-}" = "true" ]; then \
				echo "üí° CI detected: Check setup-protobuf action in GitHub workflow"; \
			else \
				echo "üí° Run 'make setup' for smart installation"; \
				echo "üí° Or run: ./scripts/install-deps-sudo.sh for system packages"; \
			fi; \
		fi; \
	fi

install-deps:
	@echo "üîß Installing development dependencies..."
	@./scripts/install-deps.sh

# Install with sudo for system packages
install-deps-sudo:
	@echo "üîß Installing development dependencies (with sudo)..."
	@./scripts/install-deps-sudo.sh

# Architectural boundary tests
arch-test: check-deps
	@echo "üèóÔ∏è Running comprehensive architectural boundary tests..."
	@echo "Testing import boundaries..."
	go test -v ./internal/arch/...
	@echo "Testing port architecture..."
	go test -v ./internal/core/ports/...
	@echo "‚úÖ All architectural tests passed"

# Quick architectural guard tests (for pre-commit)
arch-guard: check-deps
	@echo "üõ°Ô∏è Running architectural guard tests..."
	go test -run "Test_Core_Has_No_Forbidden_Imports|Test_Public_API_Boundary|Test_Circular_Dependencies" ./internal/arch/...
	@echo "‚úÖ Architectural boundaries are secure"

# Fuzzing targets
fuzz: check-deps
	@echo "üîç Running Go native fuzzing tests..."
	@echo "Running configuration fuzzing..."
	go test -fuzz=FuzzResolveConfigPath -fuzztime=30s ./pkg/ephemos/ || echo "FuzzResolveConfigPath completed"
	go test -fuzz=FuzzValidateFileAccess -fuzztime=30s ./pkg/ephemos/ || echo "FuzzValidateFileAccess completed"
	go test -fuzz=FuzzYAMLParsing -fuzztime=30s ./pkg/ephemos/ || echo "FuzzYAMLParsing completed"
	go test -fuzz=FuzzConfigValidation -fuzztime=30s ./pkg/ephemos/ || echo "FuzzConfigValidation completed"
	@echo "Running server fuzzing..."
	go test -fuzz=FuzzServiceName -fuzztime=30s ./pkg/ephemos/ || echo "FuzzServiceName completed"
	go test -fuzz=FuzzTransportAddress -fuzztime=30s ./pkg/ephemos/ || echo "FuzzTransportAddress completed"
	go test -fuzz=FuzzSPIFFESocketPath -fuzztime=30s ./pkg/ephemos/ || echo "FuzzSPIFFESocketPath completed"
	go test -fuzz=FuzzTransportType -fuzztime=30s ./pkg/ephemos/ || echo "FuzzTransportType completed"
	@echo "Running identity fuzzing..."
	go test -fuzz=FuzzIdentityParsing -fuzztime=30s ./pkg/ephemos/ || echo "FuzzIdentityParsing completed"
	go test -fuzz=FuzzTrustDomain -fuzztime=30s ./pkg/ephemos/ || echo "FuzzTrustDomain completed"
	go test -fuzz=FuzzClientAuthorization -fuzztime=30s ./pkg/ephemos/ || echo "FuzzClientAuthorization completed"
	go test -fuzz=FuzzServerTrusts -fuzztime=30s ./pkg/ephemos/ || echo "FuzzServerTrusts completed"
	go test -fuzz=FuzzContextTimeout -fuzztime=30s ./pkg/ephemos/ || echo "FuzzContextTimeout completed"
	@echo "‚úÖ Fuzzing completed successfully"

# Build fuzz targets for ClusterFuzzLite
fuzz-build: build
	@echo "üîß Building fuzz targets for ClusterFuzzLite..."
	@mkdir -p build-out
	@echo "Fuzz targets ready for ClusterFuzzLite integration"