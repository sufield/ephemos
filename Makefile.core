# Core Makefile for Ephemos
# Handles essential build, test, and development tasks
.PHONY: build proto proto-ci examples test clean deps fmt lint help setup check-deps install-deps

# Variables
PROTO_DIR := examples/proto
GO_OUT := examples/proto
CLI_BINARY := ephemos
SERVER_BINARY := echo-server
CLIENT_BINARY := echo-client

# Default target
all: proto build examples

# Build library and CLI
build: check-deps
	@echo "Building Ephemos CLI..."
	@mkdir -p bin
	go build -v -o "bin/$(CLI_BINARY)" ./cmd/ephemos-cli
	go build -v -o bin/config-validator ./cmd/config-validator
	@echo "Build completed!"

# Generate protobuf code
proto: check-deps
	@echo "Generating protobuf code..."
	@mkdir -p "$(GO_OUT)"
	@./scripts/build/generate-proto.sh "$(PROTO_DIR)" "$(GO_OUT)"

# CI-friendly protobuf generation (doesn't fail on missing protoc)
proto-ci:
	@echo "Generating protobuf code (CI mode)..."
	@mkdir -p "$(GO_OUT)"
	@./scripts/generate-proto-ci.sh "$(PROTO_DIR)" "$(GO_OUT)" || { \
		echo "‚ö†Ô∏è  Protobuf generation failed in CI mode"; \
		echo "üí° This might be expected in some CI environments"; \
		echo "üí° Ensure your CI setup includes protoc installation"; \
		exit 0; \
	}

# Build example applications
examples: proto
	@echo "Building example applications..."
	@mkdir -p bin
	go build -v -o "bin/$(SERVER_BINARY)" ./examples/echo-server
	go build -v -o "bin/$(CLIENT_BINARY)" ./examples/echo-client
	@echo "Examples built!"

# Run tests
test: check-deps
	@echo "Running tests..."
	go test -v ./...
	@echo "Tests completed!"

# Run benchmarks
benchmark: check-deps
	@echo "Running benchmarks..."
	@./scripts/benchmark.sh

# Get dependencies
deps:
	@echo "Getting dependencies..."
	go mod download
	go mod tidy
	@echo "Dependencies updated!"

# Format code
fmt:
	@echo "Formatting code..."
	go fmt ./...
	@echo "Code formatted!"

# Lint code
lint:
	@echo "Linting code..."
	@./scripts/build/lint.sh
	@echo "Linting completed!"

# Format code only (no build validation)
fmt-only:
	@echo "Formatting code..."
	@./scripts/build/lint-format-only.sh
	@echo "Formatting completed!"

# Clean build artifacts
clean:
	@echo "Cleaning build artifacts..."
	rm -rf bin/
	rm -f "$(GO_OUT)"/*.pb.go
	@echo "Clean completed!"

# Help
core-help:
	@echo "Core Ephemos Build Targets:"
	@echo ""
	@echo "  make build     - Build library and CLI"
	@echo "  make setup     - Install all development dependencies"
	@echo "  make check-deps- Check if all dependencies are installed"
	@echo "  make proto     - Generate protobuf code"
	@echo "  make proto-ci  - Generate protobuf code (CI-friendly, no strict deps)"
	@echo "  make examples  - Build example applications"
	@echo "  make test      - Run tests"
	@echo "  make benchmark - Run benchmarks"
	@echo "  make deps      - Get/update Go dependencies"
	@echo "  make fmt       - Format code"
	@echo "  make lint      - Lint code"
	@echo "  make clean     - Clean build artifacts"
	@echo "  make help      - Show this help"

# Development setup targets
setup: install-deps
	@echo "üéâ Development environment setup complete!"
	@echo "You can now run: make build"

check-deps:
	@echo "üîç Checking development dependencies..."
	@if ./scripts/check-deps.sh; then \
		echo "‚úÖ All dependencies available"; \
	else \
		echo ""; \
		echo "üîß Missing dependencies detected. Installing Go tools automatically..."; \
		if ./scripts/ensure-protoc.sh; then \
			echo "‚úÖ Go protobuf tools installed successfully"; \
		else \
			echo ""; \
			echo "‚ö†Ô∏è  Some dependencies missing. Build may fail."; \
			echo "üí° Run 'make setup' for complete installation"; \
			echo "üí° Or install protoc manually: sudo apt-get install protobuf-compiler"; \
		fi; \
	fi

install-deps:
	@echo "üîß Installing development dependencies..."
	@./scripts/install-deps.sh