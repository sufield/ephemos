# Secrets Scanning Workflow for Ephemos
# Comprehensive secret detection using multiple tools

name: Secrets Scanning

env:
  DEFAULT_BRANCH: main

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 3 AM UTC for continuous monitoring
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  # Gitleaks secret scanning
  gitleaks-scan:
    name: Gitleaks Secret Detection
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for comprehensive scanning
        # Ensure we checkout a branch when possible
        ref: ${{ github.head_ref || github.ref }}

    - name: Install Gitleaks
      run: |
        GITLEAKS_VERSION="8.28.0"
        wget -O gitleaks.tar.gz "https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz"
        tar -xzf gitleaks.tar.gz
        sudo mv gitleaks /usr/local/bin/
        gitleaks version

    - name: Run Gitleaks with SARIF output
      run: |
        gitleaks detect --config .gitleaks.toml --report-format sarif --report-path results.sarif --verbose || true
        
        # Also run without config as backup
        if [ ! -f "results.sarif" ]; then
          echo "‚ö†Ô∏è Running gitleaks with default config"
          gitleaks detect --report-format sarif --report-path results.sarif --verbose || true
        fi

    - name: Check for Gitleaks results
      run: |
        if [ -f "results.sarif" ]; then
          echo "‚úÖ Gitleaks SARIF results found"
          ls -la results.sarif
          echo "Results preview:"
          head -20 results.sarif || true
        else
          echo "‚ö†Ô∏è No SARIF results file found"
          echo "Available files:"
          ls -la . | grep -E "\.(sarif|json)$" || echo "No SARIF or JSON files found"
        fi

    - name: Upload Gitleaks results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('results.sarif') != ''
      with:
        sarif_file: results.sarif
        category: gitleaks

  # TruffleHog secret scanning (additional coverage)
  trufflehog-scan:
    name: TruffleHog Secret Detection  
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        # Ensure we checkout a branch when possible to provide base reference
        ref: ${{ github.head_ref || github.ref }}

    - name: Set base and head refs for TruffleHog
      id: refs
      run: |
        # Determine base and head references for TruffleHog scanning
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "base=${{ github.event.pull_request.base.sha }}" >> $GITHUB_OUTPUT
          echo "head=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
          echo "base=${{ github.event.before }}" >> $GITHUB_OUTPUT
          echo "head=${{ github.sha }}" >> $GITHUB_OUTPUT
        else
          # Fallback for initial commits or detached HEAD scenarios
          echo "base=${{ github.event.repository.default_branch }}" >> $GITHUB_OUTPUT
          echo "head=${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ steps.refs.outputs.base }}
        head: ${{ steps.refs.outputs.head }}
        extra_args: --debug --only-verified --json
      # Handle case where base and HEAD are the same
      continue-on-error: true

    - name: TruffleHog Full Repository Scan
      if: ${{ github.ref == format('refs/heads/{0}', env.DEFAULT_BRANCH) }}
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        extra_args: --debug --only-verified --json --no-verification

  # GitHub Secret Scanning (native)
  github-secret-scan:
    name: GitHub Secret Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Custom secret patterns for Ephemos
    - name: Custom Secret Patterns
      run: |
        echo "üîç Scanning for Ephemos-specific secrets..."
        
        # SPIFFE production URIs (not example.org or common test domains)
        if grep -rI "spiffe://[^/]*\.\(com\|net\|org\|io\)/" . --exclude-dir=.git --exclude="*.md" --exclude-dir=docs --exclude="*_test.go" --exclude-dir=examples --exclude-dir=bin --exclude=".gitleaks.toml" --exclude=".gitallowed" --exclude="*.test" | grep -v "example\.org\|test\.com\|company\.com\|example\.com\|prod\.company\.com\|other\.com"; then
          echo "‚ö†Ô∏è Found potential production SPIFFE URIs"
          exit 1
        fi
        
        # Real domain patterns in config (actual domains, not just words ending in .com/.org/etc)
        if find config/ -name "*.yaml" -exec grep -l "[a-zA-Z0-9-]\+\.\(com\|net\|org\|io\)" {} \; | xargs grep "[a-zA-Z0-9-]\+\.\(com\|net\|org\|io\)" 2>/dev/null | grep -v "example\.org\|example\.com\|test\.com\|company\.com\|k8s\.io"; then
          echo "‚ö†Ô∏è Found real domains in config files"
          exit 1
        fi
        
        # Base64 encoded secrets (longer patterns, excluding go.sum and binary files)
        if grep -rI "[A-Za-z0-9+/]\{60,\}=" . --exclude-dir=.git --exclude="*.md" --exclude-dir=docs --exclude-dir=bin --exclude="go.sum" --exclude="*.test" | grep -v "<BASE64_"; then
          echo "‚ö†Ô∏è Found potential base64 encoded secrets"
          exit 1
        fi
        
        # API key patterns
        if grep -riI "api[_-]\?key.*[a-zA-Z0-9]\{20,\}" . --exclude-dir=.git --exclude="*.md" --exclude-dir=docs --exclude-dir=bin --exclude="*.test"; then
          echo "‚ö†Ô∏è Found potential API keys"
          exit 1
        fi
        
        echo "‚úÖ No custom secrets patterns found"

  # Configuration security audit
  config-security-audit:
    name: Configuration Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'


    - name: Build config validator
      run: |
        go build -o config-validator ./cmd/config-validator

    - name: Audit configuration files
      run: |
        echo "üîç Auditing configuration files for secrets..."
        
        # Check each config file
        for config_file in config/*.yaml; do
          if [ -f "$config_file" ]; then
            echo "Checking $config_file..."
            
            # Check for production values
            if grep -i "prod\|production\|staging" "$config_file"; then
              echo "‚ö†Ô∏è Found production values in $config_file"
            fi
            
            # Check for real domains
            if grep -v "example\.org" "$config_file" | grep -E "[a-zA-Z0-9.-]+\.(com|net|org|io)"; then
              echo "‚ö†Ô∏è Found real domains in $config_file"
            fi
            
            # Check for sensitive patterns
            if grep -iE "(password|secret|key|token|credential)" "$config_file"; then
              echo "‚ö†Ô∏è Found sensitive patterns in $config_file"
            fi
          fi
        done

    - name: Validate demo configurations are safe
      run: |
        # Ensure demo configs only contain safe values
        export EPHEMOS_SERVICE_NAME="test-service"
        export EPHEMOS_TRUST_DOMAIN="test.local"
        
        if ./config-validator --env-only --verbose; then
          echo "‚úÖ Demo configuration validation passed"
        else
          echo "‚ùå Demo configuration validation failed"
          exit 1
        fi

  # Git secrets scanning (AWS patterns)
  git-secrets-scan:
    name: Git-secrets AWS Pattern Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install git-secrets
      run: |
        git clone https://github.com/awslabs/git-secrets.git
        cd git-secrets
        sudo make install
        cd ..
        rm -rf git-secrets

    - name: Initialize git-secrets
      run: |
        git secrets --register-aws
        git secrets --install

    - name: Add custom patterns
      run: |
        # Add Ephemos-specific patterns (only for real secrets, not test examples)
        git secrets --add '[aA][pP][iI][_-]?[kK][eE][yY].*[0-9a-zA-Z]{20,}'
        git secrets --add '[A-Za-z0-9+/]{60,}='  # Longer base64 to avoid false positives
        
        # Add patterns for real production domains (exclude example.org)
        git secrets --add 'spiffe://[a-zA-Z0-9.-]*\.(com|net|org|io)/[^/]*'
        
        # Exclude example.org and test domains
        git secrets --add --allowed 'spiffe://example\.org'
        git secrets --add --allowed 'spiffe://test\.com'
        git secrets --add --allowed 'pattern:\s*"spiffe://'
        git secrets --add --allowed 'AuthorizedClients.*spiffe://'
        git secrets --add --allowed 'AllowedServices.*spiffe://'

    - name: Scan repository
      run: |
        # Add allowed patterns from .gitallowed file
        if [[ -f .gitallowed ]]; then
          echo "Loading allowed patterns from .gitallowed..."
          while IFS= read -r pattern; do
            # Skip empty lines and comments
            if [[ -n "$pattern" && ! "$pattern" =~ ^# ]]; then
              git secrets --add --allowed "$pattern" || true
            fi
          done < .gitallowed
        fi
        
        # Scan repository
        if git secrets --scan --recursive .; then
          echo "‚úÖ git-secrets scan completed successfully"
        else
          echo "‚ö†Ô∏è git-secrets found potential issues"
          echo "Review the patterns above - they may be false positives"
          echo "Check .gitallowed file for approved patterns"
          exit 1
        fi

  # Security summary
  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [gitleaks-scan, trufflehog-scan, github-secret-scan, config-security-audit, git-secrets-scan]
    if: always()
    steps:
    - name: Generate Security Report
      run: |
        echo "# üîí Ephemos Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${GITLEAKS_RESULT}" == "success" ]]; then
          echo "‚úÖ **Gitleaks**: No secrets found" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Gitleaks**: Potential secrets detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${TRUFFLEHOG_RESULT}" == "success" ]]; then
          echo "‚úÖ **TruffleHog**: No secrets found" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **TruffleHog**: Potential secrets detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${GITHUB_SCAN_RESULT}" == "success" ]]; then
          echo "‚úÖ **Custom Patterns**: No secrets found" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Custom Patterns**: Potential secrets detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${CONFIG_AUDIT_RESULT}" == "success" ]]; then
          echo "‚úÖ **Config Audit**: No issues found" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Config Audit**: Security issues detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${GIT_SECRETS_RESULT}" == "success" ]]; then
          echo "‚úÖ **Git-secrets**: No secrets found" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Git-secrets**: Potential secrets detected" >> $GITHUB_STEP_SUMMARY
        fi
      env:
        GITLEAKS_RESULT: ${{ needs.gitleaks-scan.result }}
        TRUFFLEHOG_RESULT: ${{ needs.trufflehog-scan.result }}
        GITHUB_SCAN_RESULT: ${{ needs.github-secret-scan.result }}
        CONFIG_AUDIT_RESULT: ${{ needs.config-security-audit.result }}
        GIT_SECRETS_RESULT: ${{ needs.git-secrets-scan.result }}
        
    - name: Add Next Steps
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Review any failed scans immediately" >> $GITHUB_STEP_SUMMARY
        echo "- Remove any detected secrets and rotate credentials" >> $GITHUB_STEP_SUMMARY
        echo "- Update .gitleaks.toml if false positives are found" >> $GITHUB_STEP_SUMMARY
        echo "- Ensure all production secrets use environment variables" >> $GITHUB_STEP_SUMMARY