name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  GO_VERSION: '1.24'

jobs:
  # Code Quality Checks
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go Environment
      uses: ./.github/actions/setup-go
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Setup Protocol Buffers
      uses: ./.github/actions/setup-protobuf
      with:
        verify-installation: true
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m --config=.golangci.yml
      
    - name: Additional checks
      run: |
        go vet ./...
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not properly formatted:"
          gofmt -s -l .
          exit 1
        fi

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go Environment
      uses: ./.github/actions/setup-go
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Setup and run security checks
      run: make ci-setup && make ci-security

  # Build Matrix
  build:
    name: Build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.23', '1.24']
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go Environment
      uses: ./.github/actions/setup-go
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Setup Protocol Buffers
      uses: ./.github/actions/setup-protobuf
      
    - name: Build and verify
      run: |
        make ci-build
        ./bin/ephemos --help
        # Platform-specific binary testing
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ./bin/echo-server.exe --help || echo "Server help not available"
        else
          ./bin/echo-server --help || echo "Server help not available"
        fi
      shell: bash

  # Testing
  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.23', '1.24']
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go Environment
      uses: ./.github/actions/setup-go
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Setup Protocol Buffers
      uses: ./.github/actions/setup-protobuf
      
    - name: Run tests and generate coverage
      run: make ci-setup && make ci-test
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Integration Tests (Linux only, requires SPIRE)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go Environment
      uses: ./.github/actions/setup-go
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Setup Protocol Buffers
      uses: ./.github/actions/setup-protobuf
      with:
        verify-installation: true
        
    - name: Install SPIRE
      run: |
        cd scripts/demo
        chmod +x install-spire.sh
        echo "Installing SPIRE..."
        sudo ./install-spire.sh
        echo "SPIRE installation completed"
        # Verify installation
        if [ ! -f "/usr/local/bin/spire-server" ]; then
          echo "❌ SPIRE server binary not found after installation"
          exit 1
        fi
        if [ ! -f "/usr/local/bin/spire-agent" ]; then
          echo "❌ SPIRE agent binary not found after installation"
          exit 1
        fi
        echo "✅ SPIRE binaries installed successfully"
        
    - name: Build applications
      run: make ci-build
      
    - name: Start SPIRE services
      run: |
        cd scripts/demo  
        echo "Starting SPIRE services..."
        chmod +x start-spire.sh
        sudo ./start-spire.sh
        echo "Waiting for SPIRE services to start..."
        sleep 10
        
        # Verify SPIRE server is running
        if ! sudo spire-server healthcheck -socketPath /tmp/spire-server/private/api.sock; then
          echo "❌ SPIRE server health check failed"
          echo "SPIRE server log:"
          cat spire-server.log 2>/dev/null || echo "No server log found"
          exit 1
        fi
        
        # Verify SPIRE agent is running  
        if ! sudo spire-agent healthcheck -socketPath /tmp/spire-agent/public/api.sock; then
          echo "❌ SPIRE agent health check failed"
          echo "SPIRE agent log:"
          cat spire-agent.log 2>/dev/null || echo "No agent log found"
          exit 1
        fi
        
        echo "✅ SPIRE services are running"
        
    - name: Set up demo services
      run: |
        cd scripts/demo
        echo "Setting up demo services..."
        chmod +x setup-demo.sh
        sudo ./setup-demo.sh
        
        # Verify SPIRE entries were created
        echo "Verifying SPIRE registration entries..."
        sudo spire-server entry show -socketPath /tmp/spire-server/private/api.sock
        
        # Verify socket permissions and accessibility
        echo "Checking SPIRE agent socket..."
        ls -la /tmp/spire-agent/public/api.sock
        echo "Current user: $(whoami) (UID: $(id -u))"
        
        echo "✅ Demo services configured"
        
    - name: Run integration test
      run: |
        cd scripts/demo
        
        # Verify prerequisites
        echo "Verifying integration test prerequisites..."
        if [ ! -f "../../config/echo-server.yaml" ]; then
          echo "❌ Config file ../../config/echo-server.yaml not found"
          exit 1
        fi
        if [ ! -x "../../bin/echo-server" ]; then
          echo "❌ echo-server binary not found or not executable"
          exit 1
        fi
        
        # Verify SPIRE agent socket access
        echo "Testing SPIRE agent socket access..."
        if [ ! -S "/tmp/spire-agent/public/api.sock" ]; then
          echo "❌ SPIRE agent socket not found"
          exit 1
        fi
        
        echo "Current user: $(whoami) (UID: $(id -u), GID: $(id -g))"
        ls -la /tmp/spire-agent/public/api.sock
        
        # Use our improved timing test script
        echo "Running identity timing test..."
        if [ -f "./test-identity-timing.sh" ]; then
          ./test-identity-timing.sh
        else
          echo "⚠️  Using fallback manual test..."
          
          # Fallback to manual test if script doesn't exist
          cd ../..
          echo "Starting echo-server with improved timing..."
          timeout 30 bash -c 'EPHEMOS_CONFIG=config/echo-server.yaml ECHO_SERVER_ADDRESS=:50099 ./bin/echo-server > scripts/demo/test-server.log 2>&1 &'
          SERVER_PID=$!
          
          # Wait with better feedback
          for i in {1..12}; do
            if [ ! -f scripts/demo/test-server.log ]; then
              echo "⏳ Waiting for server log... (attempt $i/12)"
              sleep 2
              continue
            fi
            
            if ! kill -0 $SERVER_PID 2>/dev/null; then
              echo "❌ Server process died"
              cat scripts/demo/test-server.log
              exit 1
            fi
            
            if grep -q "Server identity created\|Server ready" scripts/demo/test-server.log; then
              echo "✅ Server successfully obtained SPIFFE identity"
              kill $SERVER_PID 2>/dev/null || true
              break
            fi
            
            echo "⏳ Waiting for identity... (attempt $i/12)"
            sleep 2
            
            if [ $i -eq 12 ]; then
              echo "❌ Timeout waiting for server identity"
              echo "=== Server Log ==="
              cat scripts/demo/test-server.log
              kill $SERVER_PID 2>/dev/null || true
              exit 1
            fi
          done
        fi
        
    - name: Cleanup SPIRE
      run: |
        cd scripts/demo
        sudo ./stop-spire.sh || true
        sudo pkill -f spire-server || true
        sudo pkill -f spire-agent || true
      if: always()

  # Dependency Check
  deps:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go Environment
      uses: ./.github/actions/setup-go
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Setup Protocol Buffers
      uses: ./.github/actions/setup-protobuf
      with:
        verify-installation: true
        
    - name: Setup and run dependency checks
      run: |
        make ci-setup
        # Install govulncheck
        go install golang.org/x/vuln/cmd/govulncheck@latest
        
        # Check dependencies for vulnerabilities
        govulncheck ./...
        
        # Go mod verify
        go mod verify
        
        # Check for unused dependencies
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint run --disable-all --enable unused --config=/dev/null

  # Performance Benchmarks
  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go Environment
      uses: ./.github/actions/setup-go
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Setup Protocol Buffers
      uses: ./.github/actions/setup-protobuf
        
    - name: Run benchmarks
      run: |
        make ci-setup
        go test -bench=. -benchmem ./... > benchmark.txt 2>&1
        echo "## Benchmark Results" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat benchmark.txt >> $GITHUB_STEP_SUMMARY  
        echo '```' >> $GITHUB_STEP_SUMMARY

  # Release Build (on tags)
  release:
    name: Release Build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [lint, security, build, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Go Environment
      uses: ./.github/actions/setup-go
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Setup Protocol Buffers
      uses: ./.github/actions/setup-protobuf
        
    - name: Install cross-compilation tools
      run: go install github.com/goreleaser/goreleaser@latest
        
    - name: Create release builds
      run: |
        make ci-setup
        mkdir -p dist
        
        # Build for multiple platforms
        PLATFORMS="linux/amd64 linux/arm64 darwin/amd64 darwin/arm64 windows/amd64"
        
        for PLATFORM in $PLATFORMS; do
          OS=${PLATFORM%/*}
          ARCH=${PLATFORM#*/}
          
          echo "Building for $OS/$ARCH..."
          
          if [ "$OS" = "windows" ]; then
            EXT=".exe"
          else
            EXT=""
          fi
          
          GOOS=$OS GOARCH=$ARCH go build -o dist/ephemos-$OS-$ARCH$EXT ./cmd/ephemos-cli
          GOOS=$OS GOARCH=$ARCH go build -o dist/echo-server-$OS-$ARCH$EXT ./examples/echo-server
          GOOS=$OS GOARCH=$ARCH go build -o dist/echo-client-$OS-$ARCH$EXT ./examples/echo-client
        done
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          dist/*
        draft: false
        prerelease: false