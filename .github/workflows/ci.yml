name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  GO_VERSION: '1.24'

jobs:
  # Code Quality Checks
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Verify Go version
      run: |
        echo "Expected Go version: ${{ env.GO_VERSION }}"
        echo "Actual Go version: $(go version)"
        go version | grep -E "(go1\.(23|24))" || (echo "ERROR: Go version is not 1.23 or 1.24" && exit 1)
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install Protocol Buffers compiler
      run: |
        sudo apt update && sudo apt install -y protobuf-compiler
        
    - name: Install Go protobuf tools
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        
    - name: Download dependencies
      run: go mod download
      
    - name: Generate protobuf code
      run: make proto
      
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m --config=.golangci.yml
      
    - name: Go vet
      run: go vet ./...
      
    - name: Go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not properly formatted:"
          gofmt -s -l .
          exit 1
        fi

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install Protocol Buffers compiler
      run: |
        sudo apt update && sudo apt install -y protobuf-compiler
        
    - name: Install Go protobuf tools
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        
    - name: Download dependencies
      run: go mod download
      
    - name: Generate protobuf code
      run: make proto
        
    - name: Run basic security checks
      run: |
        # Use go vet for basic static analysis
        go vet ./...
        echo "Basic security checks completed"

  # Build Matrix
  build:
    name: Build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.23', '1.24']
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Verify Go version
      run: |
        echo "Expected Go version: ${{ matrix.go-version }}"
        echo "Actual Go version: $(go version)"
        go version | grep -E "(go1\.(23|24))" || (echo "ERROR: Go version is not 1.23 or 1.24" && exit 1)
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-
          
    - name: Install Protocol Buffers compiler
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]] || [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt update && sudo apt install -y protobuf-compiler
          else
            brew install protobuf
          fi
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          choco install protoc
        fi
      shell: bash
      
    - name: Install Go protobuf tools
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
      
    - name: Download dependencies
      run: go mod download
      
    - name: Generate protobuf code
      run: make proto
      
    - name: Build CLI
      run: go build -v -o bin/ephemos ./cmd/ephemos-cli
      
    - name: Build examples
      run: |
        go build -v -o bin/echo-server ./examples/echo-server
        go build -v -o bin/echo-client ./examples/echo-client
        
    - name: Verify builds
      shell: bash
      run: |
        ./bin/ephemos --help
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ./bin/echo-server.exe --help || echo "Server help not available"
        else
          ./bin/echo-server --help || echo "Server help not available"
        fi

  # Testing
  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.23', '1.24']
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Verify Go version
      run: |
        echo "Expected Go version: ${{ matrix.go-version }}"
        echo "Actual Go version: $(go version)"
        go version | grep -E "(go1\.(23|24))" || (echo "ERROR: Go version is not 1.23 or 1.24" && exit 1)
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: Install Protocol Buffers compiler
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt update && sudo apt install -y protobuf-compiler
        else
          brew install protobuf
        fi
      shell: bash
      
    - name: Install Go protobuf tools
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
      
    - name: Download dependencies
      run: go mod download
      
    - name: Generate protobuf code
      run: make proto
      
    - name: Run tests with race detection
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
      
    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Integration Tests (Linux only, requires SPIRE)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install Protocol Buffers compiler
      run: |
        echo "Updating package list..."
        sudo apt update
        echo "Installing protobuf-compiler..."
        sudo apt install -y protobuf-compiler
        # Verify installation
        echo "Verifying protoc installation..."
        which protoc || (echo "❌ protoc not found after installation" && exit 1)
        protoc --version || (echo "❌ protoc version check failed" && exit 1)
        echo "✅ protoc installed successfully"
        
    - name: Install Go protobuf tools
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        # Verify Go plugins are in PATH
        which protoc-gen-go
        which protoc-gen-go-grpc
        
    - name: Install SPIRE
      run: |
        cd scripts/demo
        chmod +x install-spire.sh
        echo "Installing SPIRE..."
        sudo ./install-spire.sh
        echo "SPIRE installation completed"
        # Verify installation
        if [ ! -f "/usr/local/bin/spire-server" ]; then
          echo "❌ SPIRE server binary not found after installation"
          exit 1
        fi
        if [ ! -f "/usr/local/bin/spire-agent" ]; then
          echo "❌ SPIRE agent binary not found after installation"
          exit 1
        fi
        echo "✅ SPIRE binaries installed successfully"
        
    - name: Build applications
      run: |
        echo "Checking protoc availability..."
        which protoc || echo "protoc not found in PATH"
        echo "PATH: $PATH"
        make build examples
      
    - name: Start SPIRE services
      run: |
        cd scripts/demo  
        echo "Starting SPIRE services..."
        chmod +x start-spire.sh
        sudo ./start-spire.sh
        echo "Waiting for SPIRE services to start..."
        sleep 10
        
        # Verify SPIRE server is running
        if ! sudo spire-server healthcheck -socketPath /tmp/spire-server/private/api.sock; then
          echo "❌ SPIRE server health check failed"
          echo "SPIRE server log:"
          cat spire-server.log 2>/dev/null || echo "No server log found"
          exit 1
        fi
        
        # Verify SPIRE agent is running  
        if ! sudo spire-agent healthcheck -socketPath /tmp/spire-agent/public/api.sock; then
          echo "❌ SPIRE agent health check failed"
          echo "SPIRE agent log:"
          cat spire-agent.log 2>/dev/null || echo "No agent log found"
          exit 1
        fi
        
        echo "✅ SPIRE services are running"
        
    - name: Set up demo services
      run: |
        cd scripts/demo
        echo "Setting up demo services..."
        chmod +x setup-demo.sh
        sudo ./setup-demo.sh
        
        # Verify SPIRE entries were created
        echo "Verifying SPIRE registration entries..."
        sudo spire-server entry show -socketPath /tmp/spire-server/private/api.sock
        
        # Verify socket permissions and accessibility
        echo "Checking SPIRE agent socket..."
        ls -la /tmp/spire-agent/public/api.sock
        echo "Current user: $(whoami) (UID: $(id -u))"
        
        echo "✅ Demo services configured"
        
    - name: Run integration test
      run: |
        cd scripts/demo
        # Verify config and binary exist
        if [ ! -f "../../config/echo-server.yaml" ]; then
          echo "❌ Config file ../../config/echo-server.yaml not found"
          exit 1
        fi
        if [ ! -x "../../bin/echo-server" ]; then
          echo "❌ echo-server binary not found or not executable"
          exit 1
        fi
        
        # Verify the workload can access SPIRE agent socket
        echo "Testing SPIRE agent socket access..."
        if [ ! -S "/tmp/spire-agent/public/api.sock" ]; then
          echo "❌ SPIRE agent socket not found"
          exit 1
        fi
        
        # Check current user and their access to socket  
        echo "Current user: $(whoami) (UID: $(id -u), GID: $(id -g))"
        ls -la /tmp/spire-agent/public/api.sock
        
        # Test server can start and get identity
        echo "Starting echo-server..."
        timeout 15 bash -c 'EPHEMOS_CONFIG=../../config/echo-server.yaml ECHO_SERVER_ADDRESS=:50099 ../../bin/echo-server > test-server.log 2>&1 &'
        sleep 8
        
        # Check if server got identity
        if grep -q "Server identity created" test-server.log; then
          echo "✅ Server successfully obtained SPIFFE identity"
        else
          echo "❌ Server failed to obtain SPIFFE identity"
          echo "=== Server Log ==="
          cat test-server.log
          echo "=== SPIRE Agent Log ==="
          cat spire-agent.log 2>/dev/null | tail -20 || echo "No agent log available"
          echo "=== SPIRE Server Log ==="
          cat spire-server.log 2>/dev/null | tail -20 || echo "No server log available"
          exit 1
        fi
        
    - name: Cleanup SPIRE
      run: |
        cd scripts/demo
        sudo ./stop-spire.sh || true
        sudo pkill -f spire-server || true
        sudo pkill -f spire-agent || true
      if: always()

  # Dependency Check
  deps:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install Protocol Buffers compiler
      run: |
        sudo apt update && sudo apt install -y protobuf-compiler
        
    - name: Install Go protobuf tools
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        
    - name: Download dependencies
      run: go mod download
      
    - name: Generate protobuf code
      run: make proto
        
    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
      
    - name: Check dependencies for vulnerabilities
      run: |
        govulncheck ./...
        
    - name: Go mod verify
      run: go mod verify
      
    - name: Check for unused dependencies
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint run --disable-all --enable unused --config=/dev/null

  # Performance Benchmarks
  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install Protocol Buffers compiler
      run: |
        sudo apt update && sudo apt install -y protobuf-compiler
        
    - name: Install Go protobuf tools
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        
    - name: Download dependencies
      run: go mod download
      
    - name: Generate protobuf code
      run: make proto
        
    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem ./... > benchmark.txt 2>&1
        echo "## Benchmark Results" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat benchmark.txt >> $GITHUB_STEP_SUMMARY  
        echo '```' >> $GITHUB_STEP_SUMMARY

  # Release Build (on tags)
  release:
    name: Release Build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [lint, security, build, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install cross-compilation tools
      run: |
        go install github.com/goreleaser/goreleaser@latest
        
    - name: Create release builds
      run: |
        mkdir -p dist
        
        # Build for multiple platforms
        PLATFORMS="linux/amd64 linux/arm64 darwin/amd64 darwin/arm64 windows/amd64"
        
        for PLATFORM in $PLATFORMS; do
          OS=${PLATFORM%/*}
          ARCH=${PLATFORM#*/}
          
          echo "Building for $OS/$ARCH..."
          
          if [ "$OS" = "windows" ]; then
            EXT=".exe"
          else
            EXT=""
          fi
          
          GOOS=$OS GOARCH=$ARCH go build -o dist/ephemos-$OS-$ARCH$EXT ./cmd/ephemos-cli
          GOOS=$OS GOARCH=$ARCH go build -o dist/echo-server-$OS-$ARCH$EXT ./examples/echo-server
          GOOS=$OS GOARCH=$ARCH go build -o dist/echo-client-$OS-$ARCH$EXT ./examples/echo-client
        done
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          dist/*
        draft: false
        prerelease: false