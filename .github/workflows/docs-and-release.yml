name: Documentation & Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '**.md'

jobs:
  # Documentation linting and validation
  docs-lint:
    name: Documentation Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install markdownlint
      run: npm install -g markdownlint-cli
      
    - name: Lint Markdown files
      run: |
        markdownlint '**/*.md' --ignore node_modules --ignore .github || true
        
    - name: Check links in documentation
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/workflows/markdown-link-check-config.json'
        folder-path: 'docs'
      continue-on-error: true

  # Generate API documentation
  api-docs:
    name: Generate API Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        
    - name: Install godoc
      run: go install golang.org/x/tools/cmd/godoc@latest
      
    - name: Generate documentation
      run: |
        mkdir -p docs/api
        
        # Generate package documentation
        for pkg in $(go list ./...); do
          pkg_name=$(basename $pkg)
          echo "Generating docs for $pkg"
          if go doc -all $pkg > docs/api/${pkg_name}.md 2>/dev/null; then
            echo "✅ Documentation generated for $pkg"
          else
            echo "⚠️  Skipping $pkg (no documentable source files)"
            rm -f docs/api/${pkg_name}.md
          fi
        done
        
    - name: Install go-swagger
      run: go install github.com/go-swagger/go-swagger/cmd/swagger@latest
      
    - name: Generate OpenAPI spec (if applicable)
      run: |
        # Generate swagger spec if swagger comments exist
        if grep -r "swagger:" . --include="*.go" >/dev/null 2>&1; then
          swagger generate spec -o docs/api/swagger.json
          swagger generate markdown -f docs/api/swagger.json -o docs/api/api.md
        fi
      continue-on-error: true
      
    - name: Upload API documentation
      uses: actions/upload-artifact@v4
      with:
        name: api-documentation
        path: docs/api/

  # Configuration validation
  validate-configs:
    name: Validate Configurations
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        
        
    - name: Build project
      run: |
        make build
        
    - name: Validate configuration files
      run: |
        # Check YAML syntax in config directory
        for file in config/*.yaml; do
          if [[ -f "$file" ]]; then
            echo "Validating $file"
            python3 -c "import yaml; yaml.safe_load(open('$file'))" || echo "Invalid YAML: $file"
          fi
        done
        
    - name: Verify configuration validator
      run: |
        # Build and test the config validator tool
        go build -o config-validator ./cmd/config-validator
        ./config-validator --help || echo "Config validator help check"

  # Release automation removed from this branch - will be added in separate release PR

  # Container scanning removed since it depends on release job