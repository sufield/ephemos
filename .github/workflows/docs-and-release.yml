name: Documentation & Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '**.md'
      - 'examples/**'

jobs:
  # Documentation linting and validation
  docs-lint:
    name: Documentation Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install markdownlint
      run: npm install -g markdownlint-cli
      
    - name: Lint Markdown files
      run: |
        markdownlint '**/*.md' --ignore node_modules --ignore .github || true
        
    - name: Check links in documentation
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/workflows/markdown-link-check-config.json'
        folder-path: 'docs'
      continue-on-error: true

  # Generate API documentation
  api-docs:
    name: Generate API Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        
    - name: Install godoc
      run: go install golang.org/x/tools/cmd/godoc@latest
      
    - name: Generate documentation
      run: |
        mkdir -p docs/api
        
        # Generate package documentation
        for pkg in $(go list ./...); do
          pkg_name=$(basename $pkg)
          echo "Generating docs for $pkg"
          if go doc -all $pkg > docs/api/${pkg_name}.md 2>/dev/null; then
            echo "✅ Documentation generated for $pkg"
          else
            echo "⚠️  Skipping $pkg (no documentable source files)"
            rm -f docs/api/${pkg_name}.md
          fi
        done
        
    - name: Install go-swagger
      run: go install github.com/go-swagger/go-swagger/cmd/swagger@latest
      
    - name: Generate OpenAPI spec (if applicable)
      run: |
        # Generate swagger spec if swagger comments exist
        if grep -r "swagger:" . --include="*.go" >/dev/null 2>&1; then
          swagger generate spec -o docs/api/swagger.json
          swagger generate markdown -f docs/api/swagger.json -o docs/api/api.md
        fi
      continue-on-error: true
      
    - name: Upload API documentation
      uses: actions/upload-artifact@v4
      with:
        name: api-documentation
        path: docs/api/

  # Example validation
  validate-examples:
    name: Validate Examples
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        
    - name: Build examples
      run: |
        make build examples
        
    - name: Validate example configuration files
      run: |
        # Check YAML syntax
        for file in config/*.yaml examples/**/*.yaml; do
          if [[ -f "$file" ]]; then
            echo "Validating $file"
            python3 -c "import yaml; yaml.safe_load(open('$file'))" || echo "Invalid YAML: $file"
          fi
        done
        
    - name: Test example documentation
      run: |
        # Check if example commands in README work
        if grep -q "go run examples" README.md; then
          echo "Found Go run examples in README, validating..."
          # Extract and test go run commands
          grep "go run examples" README.md | while read line; do
            echo "Testing: $line"
            timeout 5 $line --help || echo "Command failed: $line"
          done
        fi

  # Release automation
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [docs-lint, api-docs, validate-examples]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        
    - name: Install GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        install-only: true
        
    - name: Create .goreleaser.yaml
      run: |
        cat > .goreleaser.yaml << 'EOF'
        project_name: ephemos
        
        before:
          hooks:
            - go mod tidy
            - go generate ./...
            
        builds:
          - id: ephemos-cli
            main: ./cmd/ephemos-cli
            binary: ephemos
            env:
              - CGO_ENABLED=0
            goos:
              - linux
              - darwin
              - windows
            goarch:
              - amd64
              - arm64
            ignore:
              - goos: windows
                goarch: arm64
                
          - id: echo-server
            main: ./examples/echo-server
            binary: echo-server
            env:
              - CGO_ENABLED=0
            goos:
              - linux
              - darwin
              - windows
            goarch:
              - amd64
              - arm64
            ignore:
              - goos: windows
                goarch: arm64
                
          - id: echo-client
            main: ./examples/echo-client
            binary: echo-client
            env:
              - CGO_ENABLED=0
            goos:
              - linux
              - darwin
              - windows
            goarch:
              - amd64
              - arm64
            ignore:
              - goos: windows
                goarch: arm64

        archives:
          - format: tar.gz
            name_template: >-
              {{ .ProjectName }}_
              {{- title .Os }}_
              {{- if eq .Arch "amd64" }}x86_64
              {{- else if eq .Arch "386" }}i386
              {{- else }}{{ .Arch }}{{ end }}
              {{- if .Arm }}v{{ .Arm }}{{ end }}
            format_overrides:
              - goos: windows
                format: zip
                
        checksum:
          name_template: 'checksums.txt'
          
        snapshot:
          name_template: "{{ incpatch .Version }}-next"
          
        changelog:
          sort: asc
          filters:
            exclude:
              - '^docs:'
              - '^test:'
              - '^ci:'
              - '^chore:'
              
        release:
          github:
            owner: sufield
            name: ephemos
          draft: false
          prerelease: auto
          name_template: "Release {{.Tag}}"
          
        dockers:
          - image_templates:
              - "ghcr.io/sufield/ephemos:{{ .Tag }}"
              - "ghcr.io/sufield/ephemos:latest"
            build_flag_templates:
              - "--platform=linux/amd64"
              - "--label=org.opencontainers.image.created={{.Date}}"
              - "--label=org.opencontainers.image.title={{.ProjectName}}"
              - "--label=org.opencontainers.image.revision={{.FullCommit}}"
              - "--label=org.opencontainers.image.version={{.Version}}"
            dockerfile: Dockerfile
            use: buildx
        EOF
        
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM alpine:latest
        RUN apk --no-cache add ca-certificates
        WORKDIR /root/
        COPY ephemos .
        CMD ["./ephemos"]
        EOF
        
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update documentation site
      run: |
        # Generate changelog for documentation
        echo "## Release Notes for ${GITHUB_REF#refs/tags/}" > release-notes.md
        echo "" >> release-notes.md
        
        # Extract changelog from git log since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [[ -n "$LAST_TAG" ]]; then
          git log --oneline ${LAST_TAG}..HEAD --no-merges >> release-notes.md
        else
          git log --oneline --no-merges >> release-notes.md
        fi
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          dist/
          release-notes.md

  # Container image security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [release]
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/sufield/ephemos:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'