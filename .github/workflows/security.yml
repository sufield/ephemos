name: Security & Dependencies

on:
  schedule:
    # Run daily at 1 AM UTC
    - cron: '0 1 * * *'
  push:
    branches: [ main ]
    paths:
      - 'go.mod'
      - 'go.sum'
  pull_request:
    branches: [ main ]
    paths:
      - 'go.mod'
      - 'go.sum'
      - '**/*.go'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  # Dependency vulnerability scanning
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Set up Go
      uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
      with:
        go-version: '1.24.x'
        
    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
      
    - name: Run vulnerability check
      run: govulncheck ./...

  # License compliance check
  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Set up Go
      uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
      with:
        go-version: '1.24.x'
        
    - name: Install go-licenses
      run: |
        echo "Installing go-licenses..."
        timeout 300 go install github.com/google/go-licenses@latest || echo "go-licenses installation timed out"
      
    - name: Check licenses
      run: |
        if command -v go-licenses >/dev/null 2>&1; then
          echo "Running license checks..."
          timeout 180 go-licenses check ./... || echo "License check failed or timed out"
          timeout 180 go-licenses report ./... > licenses.txt || echo "License report failed or timed out"
        else
          echo "go-licenses not available, creating empty report"
          echo "go-licenses installation failed" > licenses.txt
        fi
        
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.txt

  # Dependency updates via Dependabot-like functionality
  dependency-update:
    name: Dependency Update Check
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Set up Go
      uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
      with:
        go-version: '1.24.x'
        
    - name: Check for outdated dependencies
      run: |
        go list -u -m all > current-deps.txt
        echo "## Dependency Status" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat current-deps.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
    - name: Try updating dependencies
      run: |
        go get -u ./...
        go mod tidy
        
    - name: Check if updates are available
      id: check-updates
      run: |
        if git diff --quiet go.mod go.sum; then
          echo "updates=false" >> $GITHUB_OUTPUT
        else
          echo "updates=true" >> $GITHUB_OUTPUT
          echo "## Available Updates" >> $GITHUB_STEP_SUMMARY
          echo '```diff' >> $GITHUB_STEP_SUMMARY
          git diff go.mod go.sum >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Create dependency update PR
      if: steps.check-updates.outputs.updates == 'true'
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update Go dependencies'
        title: 'chore: update Go dependencies'
        body: |
          Automated dependency updates detected.
          
          This PR updates Go modules to their latest versions.
          
          Please review the changes and ensure all tests pass before merging.
        branch: chore/dependency-updates
        delete-branch: true

  # SAST (Static Application Security Testing)
  # NOTE: GitHub Code Scanning may show warnings about configuration differences
  # between branches when workflows are modified. This is expected behavior and
  # does not affect the security analysis functionality.
  sast-scan:
    name: SAST Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Verify SAST configuration
      run: |
        echo "üîç SAST Scan Configuration Verification"
        echo "Job: sast-scan"
        echo "Runner: ubuntu-latest" 
        echo "Permissions: security-events: write, actions: read, contents: read"
        echo "Languages: go"
        echo "Tools: CodeQL, Semgrep"
        echo "‚úÖ Configuration validated - any GitHub scanning warnings are informational"
      
    - name: Set up Go
      uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
      with:
        go-version: '1.24.x'
        
    - name: Setup Protocol Buffers (Required for Build)
      uses: ./.github/actions/setup-protobuf
        
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: go
        
    - name: Build for CodeQL
      run: |
        go build -v ./...
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/golang
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      continue-on-error: true

  # Supply chain security with enhanced SBOM generation
  supply-chain-security:
    name: Supply Chain Security & SBOM
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Set up Go
      uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
      with:
        go-version: '1.24.x'
        
    - name: Setup Protocol Buffers (Required for Build)
      uses: ./.github/actions/setup-protobuf
        
    - name: Build project for SBOM scanning
      run: |
        make proto build
        
    - name: Install Syft for SBOM generation
      run: |
        echo "Installing Syft for SBOM generation..."
        if ! timeout 300 curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin; then
          echo "‚ö†Ô∏è Syft installation failed or timed out, trying Go install..."
          timeout 300 go install github.com/anchore/syft/cmd/syft@latest || echo "Go install also failed"
        fi
        
        # Verify installation
        if syft --version 2>/dev/null; then
          echo "‚úÖ Syft installed successfully"
        else
          echo "‚ùå Syft installation failed, will skip SBOM generation"
          echo "false" > syft_available.txt
        fi
        
    - name: Generate SBOM with Syft
      run: |
        mkdir -p sbom
        echo "Generating SBOM files..."
        
        # Check if Syft is available
        if ! command -v syft >/dev/null 2>&1; then
          echo "‚ùå Syft not available, creating placeholder SBOM files"
          echo '{"error": "Syft not available for SBOM generation"}' > sbom/ephemos-sbom.spdx.json
          echo '{"error": "Syft not available for SBOM generation"}' > sbom/ephemos-sbom.cyclonedx.json
          echo "SBOM generation skipped - Syft installation failed" > sbom/ephemos-sbom-summary.txt
          echo "$(date): SBOM generation failed" > sbom/ephemos-sbom-checksums.txt
          exit 0
        fi
        
        # Generate SPDX format SBOM (primary format)
        if timeout 300 syft . -o spdx-json --file sbom/ephemos-sbom.spdx.json; then
          echo "‚úÖ SPDX SBOM generated successfully"
        else
          echo "‚ùå SPDX SBOM generation failed or timed out"
          echo '{"error": "SPDX SBOM generation failed"}' > sbom/ephemos-sbom.spdx.json
        fi
        
        # Generate CycloneDX format SBOM (secondary format)
        if timeout 300 syft . -o cyclonedx-json --file sbom/ephemos-sbom.cyclonedx.json; then
          echo "‚úÖ CycloneDX SBOM generated successfully"
        else
          echo "‚ö†Ô∏è CycloneDX SBOM generation failed or timed out, continuing..."
          echo '{"error": "CycloneDX SBOM generation failed"}' > sbom/ephemos-sbom.cyclonedx.json
        fi
        
        # Generate human-readable summary (optional)
        if timeout 300 syft . -o text --file sbom/ephemos-sbom-summary.txt; then
          echo "‚úÖ SBOM summary generated successfully"
        else
          echo "‚ö†Ô∏è SBOM summary generation failed or timed out, continuing..."
          echo "SBOM summary generation failed" > sbom/ephemos-sbom-summary.txt
        fi
        
        # Generate checksums for available files
        cd sbom
        if ls *.json *.txt >/dev/null 2>&1; then
          sha256sum *.json *.txt > ephemos-sbom-checksums.txt 2>/dev/null || echo "‚ö†Ô∏è Checksum generation failed"
        fi
        cd ..
        
    - name: Validate SBOM quality
      run: |
        # Check SBOM file sizes (ensure they're not empty)
        for file in sbom/*.json; do
          if [ -s "$file" ]; then
            echo "‚úÖ $file: $(wc -c < "$file") bytes"
          else
            echo "‚ùå $file is empty!"
            exit 1
          fi
        done
        
        # Validate JSON structure
        if command -v jq >/dev/null 2>&1; then
          jq empty sbom/*.json
          echo "‚úÖ All SBOM JSON files are valid"
        fi
        
    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ephemos-sbom-complete
        path: sbom/
        retention-days: 90
        
    - name: Install vulnerability scanners
      run: |
        # Install OSV Scanner
        go install github.com/google/osv-scanner/cmd/osv-scanner@latest
        
        # Install Grype for vulnerability scanning
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        
    - name: Run OSV Scanner on SBOM
      run: |
        osv-scanner --format json --output osv-results.json ./...
        
        # Also scan the SBOM directly
        osv-scanner --sbom sbom/ephemos-sbom.spdx.json --format json --output osv-sbom-results.json || true
        
      continue-on-error: true
      
    - name: Run Grype vulnerability scan
      run: |
        # Scan the built project
        grype . -o json --file grype-results.json
        
        # Scan the SBOM directly
        grype sbom:sbom/ephemos-sbom.spdx.json -o json --file grype-sbom-results.json
        
      continue-on-error: true
        
    - name: Generate vulnerability summary
      run: |
        echo "# Vulnerability Scan Summary" > vuln-summary.md
        echo "Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> vuln-summary.md
        echo "" >> vuln-summary.md
        
        if [ -f "osv-results.json" ]; then
          echo "## OSV Scanner Results" >> vuln-summary.md
          if command -v jq >/dev/null 2>&1; then
            vuln_count=$(jq '.results[].packages[].vulnerabilities | length' osv-results.json 2>/dev/null | paste -sd+ | bc 2>/dev/null || echo "0")
            echo "- Total vulnerabilities found: $vuln_count" >> vuln-summary.md
          fi
        fi
        
        if [ -f "grype-results.json" ]; then
          echo "## Grype Scanner Results" >> vuln-summary.md
          if command -v jq >/dev/null 2>&1; then
            grype_count=$(jq '.matches | length' grype-results.json 2>/dev/null || echo "0")
            echo "- Total matches found: $grype_count" >> vuln-summary.md
          fi
        fi
        
    - name: Upload vulnerability scan results
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-scan-results
        path: |
          osv-results.json
          osv-sbom-results.json
          grype-results.json
          grype-sbom-results.json
          vuln-summary.md
      if: always()
      
    - name: Comment PR with SBOM info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üìã SBOM Generation Results\n\n';
          
          // Check if SBOM files were generated
          const spdxExists = fs.existsSync('sbom/ephemos-sbom.spdx.json');
          const cyclonDxExists = fs.existsSync('sbom/ephemos-sbom.cyclonedx.json');
          
          if (spdxExists && cyclonDxExists) {
            comment += '‚úÖ SBOM generation successful\n';
            comment += '- SPDX format: Generated\n';
            comment += '- CycloneDX format: Generated\n';
            comment += '- Artifacts uploaded for compliance review\n\n';
            
            if (fs.existsSync('vuln-summary.md')) {
              const vulnSummary = fs.readFileSync('vuln-summary.md', 'utf8');
              comment += vulnSummary;
            }
          } else {
            comment += '‚ùå SBOM generation failed\n';
            comment += 'Check the workflow logs for details.\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # 2025 Enhanced Dependency Security
  enhanced-dependency-security:
    name: Enhanced Dependency Security (2025)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Set up Go
      uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
      with:
        go-version: '1.24.x'

    # Advanced vulnerability scanning
    - name: Install nancy (Sonatype)
      run: |
        curl -L -o nancy https://github.com/sonatypecommunity/nancy/releases/latest/download/nancy-v1.0.46-linux-amd64
        chmod +x nancy
        sudo mv nancy /usr/local/bin/

    - name: Run Nancy vulnerability scan
      run: |
        go list -json -deps ./... | nancy sleuth --loud
      continue-on-error: true

    # Check for known malicious packages
    - name: Malicious Package Detection
      run: |
        echo "üîç Checking for known malicious packages..."
        
        # Check against known bad packages (example patterns)
        if go list -m all | grep -E "(typosquatting|malicious-package)"; then
          echo "‚ùå Found potentially malicious packages"
          exit 1
        fi
        
        # Check for suspicious package names (typosquatting)
        go list -m all | while read -r pkg version; do
          # Check for common typosquats of popular packages
          if echo "$pkg" | grep -iE "(goggle|grcp|spifee)"; then
            echo "‚ö†Ô∏è Potential typosquatting detected: $pkg"
            echo "Please verify this is the correct package"
          fi
        done

    # License compliance and security
    - name: Enhanced License Check
      run: |
        go install github.com/google/go-licenses@latest
        
        echo "üìã Checking licenses for security compliance..."
        go-licenses check ./...
        
        # Generate detailed license report
        go-licenses report ./... > detailed-licenses.txt
        
        # Check for problematic licenses
        if grep -i "gpl\|copyleft\|agpl" detailed-licenses.txt; then
          echo "‚ö†Ô∏è Found copyleft licenses - review for compliance"
        fi

    - name: Dependency Age Analysis
      run: |
        echo "üìÖ Analyzing dependency ages..."
        
        # Check for very old dependencies (potential security risk)
        go list -m -versions all | while read -r pkg versions; do
          if [ -n "$versions" ]; then
            latest_version=$(echo "$versions" | awk '{print $NF}')
            echo "Package: $pkg, Latest: $latest_version"
          fi
        done > dependency-ages.txt

    - name: Upload enhanced security artifacts
      uses: actions/upload-artifact@v4
      with:
        name: enhanced-security-scan
        path: |
          detailed-licenses.txt
          dependency-ages.txt
      if: always()

  # Container Security (if Docker is used)
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

    - name: Check for Dockerfiles
      id: dockerfile-check
      run: |
        if find . -name "Dockerfile" -o -name "*.dockerfile" | grep -q .; then
          echo "has-dockerfile=true" >> $GITHUB_OUTPUT
        else
          echo "has-dockerfile=false" >> $GITHUB_OUTPUT
        fi

    - name: Run Trivy vulnerability scanner
      if: steps.dockerfile-check.outputs.has-dockerfile == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && steps.dockerfile-check.outputs.has-dockerfile == 'true'
      with:
        sarif_file: 'trivy-results.sarif'