name: 'Setup Go Environment'
description: 'Setup Go with caching and version verification'
inputs:
  go-version:
    description: 'Go version to install'
    required: false
    default: '1.24'
  verify-version:
    description: 'Whether to verify the Go version matches expected'
    required: false
    default: 'true'
runs:
  using: 'composite'
  steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}
        check-latest: true
    
    - name: Ensure Go stdlib is present (Windows fix)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo "üîß Fixing Go standard library on Windows..."
        echo "Current Go version: $(go version)"
        echo "GOROOT: $(go env GOROOT)"
        
        # Check if stdlib sources are missing
        if [ ! -d "$(go env GOROOT)/src/context" ]; then
          echo "‚ö†Ô∏è Standard library sources missing, installing full toolchain..."
          
          # Install latest toolchain to ensure stdlib sources
          go install golang.org/toolchain@latest || true
          
          # Force install the specific Go version with stdlib
          go tool toolchain install go${{ inputs.go-version }} || true
          
          # Update environment if toolchain was installed
          if [ -d "$(go env GOTOOLCHAINPATH)/go${{ inputs.go-version }}" ]; then
            echo "$(go env GOTOOLCHAINPATH)/go${{ inputs.go-version }}/bin" >> $GITHUB_PATH
            export PATH="$(go env GOTOOLCHAINPATH)/go${{ inputs.go-version }}/bin:$PATH"
          fi
          
          # Verify the fix
          echo "After fix - Go version: $(go version)"
          echo "After fix - GOROOT: $(go env GOROOT)"
          ls "$(go env GOROOT)/src/context" >/dev/null 2>&1 && echo "‚úÖ context package found" || echo "‚ùå context package still missing"
          ls "$(go env GOROOT)/src/crypto" >/dev/null 2>&1 && echo "‚úÖ crypto package found" || echo "‚ùå crypto package still missing"
        else
          echo "‚úÖ Standard library sources already present"
        fi
    
    - name: Clean conflicting cache directories before restore
      shell: bash
      run: |
        echo "üßπ Cleaning potential conflicting cache directories..."
        # Clean cache directories that might conflict with cache restoration
        rm -rf ~/.cache/go-build || true
        rm -rf ~/go/pkg/mod || true
        # Create directories to ensure proper permissions
        mkdir -p ~/.cache/go-build
        mkdir -p ~/go/pkg
        echo "‚úÖ Cache directories cleaned and prepared"
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ inputs.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ inputs.go-version }}-
          ${{ runner.os }}-go-
        
    - name: Clear Go build caches (preserve modules)
      shell: bash
      run: |
        echo "üßπ Clearing Go build and test caches (preserving modules)..."
        go clean -cache || true
        go clean -testcache || true
        # NOTE: Not clearing modcache to preserve downloaded modules
        echo "‚úÖ Go build caches cleared (modules preserved)"
        
    - name: Verify Go version
      if: ${{ inputs.verify-version == 'true' }}
      shell: bash
      run: |
        echo "Expected Go version: ${GO_VERSION}"
        echo "Actual Go version: $(go version)"
        go version | grep -E "(go1\.(22|23|24))" || (echo "ERROR: Go version is not 1.22, 1.23, or 1.24" && exit 1)
      env:
        GO_VERSION: ${{ inputs.go-version }}
          
    - name: Download dependencies
      shell: bash
      run: go mod download