name: 'Setup Protocol Buffers'
description: 'Install protobuf compiler, Go protobuf tools, and generate protobuf files'
runs:
  using: 'composite'
  steps:
    - name: Install Protocol Buffers compiler (Ubuntu)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        echo "Installing protobuf compiler for Ubuntu..."
        sudo apt-get update && sudo apt-get install -y protobuf-compiler
        echo "Verifying protoc installation..."
        export PATH="$PATH:/usr/bin"
        which protoc || (echo "‚ùå protoc not found" && exit 1)
        protoc --version || (echo "‚ùå protoc version check failed" && exit 1)
        echo "‚úÖ protoc installed at: $(which protoc)"
        
    - name: Install Protocol Buffers compiler (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        echo "Installing protobuf compiler for macOS..."
        brew install protobuf
        echo "Verifying protoc installation..."
        which protoc || (echo "‚ùå protoc not found" && exit 1)
        protoc --version || (echo "‚ùå protoc version check failed" && exit 1)
        echo "‚úÖ protoc installed at: $(which protoc)"
        
    - name: Install Protocol Buffers compiler (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo "Installing protobuf compiler for Windows..."
        choco install protoc
        echo "Verifying protoc installation..."
        which protoc || (echo "‚ùå protoc not found" && exit 1)
        protoc --version || (echo "‚ùå protoc version check failed" && exit 1)
        echo "‚úÖ protoc installed at: $(which protoc)"
        
    - name: Install Go protobuf tools
      shell: bash
      run: |
        echo "Installing Go protobuf tools..."
        
        # Ensure Go and necessary environment variables are set
        export GO111MODULE=on
        export GOBIN=$(go env GOPATH)/bin
        export PATH="$PATH:$GOBIN"
        
        # Ensure Go is working properly
        go version
        go env GOPATH
        echo "GOBIN: $GOBIN"
        echo "PATH: $PATH"
        
        # Set Go proxy to handle network issues
        go env -w GOPROXY=https://proxy.golang.org,direct
        
        # Ensure Go bin directory exists
        mkdir -p "$GOBIN"
        
        # Clean install protoc-gen-go and protoc-gen-go-grpc with retries
        echo "Installing protoc-gen-go..."
        for i in {1..3}; do
          if go install google.golang.org/protobuf/cmd/protoc-gen-go@latest; then
            echo "‚úÖ protoc-gen-go installed on attempt $i"
            break
          else
            echo "‚ö†Ô∏è protoc-gen-go install attempt $i failed, retrying..."
            if [ $i -eq 3 ]; then
              echo "‚ùå Failed to install protoc-gen-go after 3 attempts"
              exit 1
            fi
            sleep 2
          fi
        done
        
        echo "Installing protoc-gen-go-grpc..."
        for i in {1..3}; do
          if go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest; then
            echo "‚úÖ protoc-gen-go-grpc installed on attempt $i"
            break
          else
            echo "‚ö†Ô∏è protoc-gen-go-grpc install attempt $i failed, retrying..."
            if [ $i -eq 3 ]; then
              echo "‚ùå Failed to install protoc-gen-go-grpc after 3 attempts"
              exit 1
            fi
            sleep 2
          fi
        done
        
        # Add Go bin to PATH for current and future steps
        echo "$GOBIN" >> $GITHUB_PATH
        
        # Verify installation with updated PATH
        export PATH="$GOBIN:$PATH"
        echo "Verifying installation with updated PATH..."
        which protoc-gen-go || { echo "‚ùå protoc-gen-go not found in PATH: $PATH"; ls -la "$GOBIN"; exit 1; }
        which protoc-gen-go-grpc || { echo "‚ùå protoc-gen-go-grpc not found in PATH: $PATH"; ls -la "$GOBIN"; exit 1; }
        
        echo "‚úÖ Go protobuf tools installed successfully"
        echo "protoc-gen-go: $(which protoc-gen-go)"
        echo "protoc-gen-go-grpc: $(which protoc-gen-go-grpc)"
        
        # Make tools executable (in case permissions are wrong)
        chmod +x "$GOBIN/protoc-gen-go" "$GOBIN/protoc-gen-go-grpc" 2>/dev/null || true
        
    - name: Verify all tools are available
      shell: bash
      run: |
        echo "Final verification of all protobuf tools..."
        # Ensure Go bin directory is in PATH (redundant but safe)
        export GOBIN=$(go env GOPATH)/bin
        export PATH="$GOBIN:$PATH:/usr/bin:/usr/local/bin"
        
        echo "Current PATH: $PATH"
        echo "GOBIN: $GOBIN"
        echo "Contents of GOBIN directory:"
        ls -la "$GOBIN" || echo "GOBIN directory not found"
        
        echo "Checking protoc..."
        which protoc && protoc --version || { echo "‚ùå protoc verification failed"; exit 1; }
        
        echo "Checking protoc-gen-go..."
        which protoc-gen-go || { echo "‚ùå protoc-gen-go not found"; exit 1; }
        
        echo "Checking protoc-gen-go-grpc..."  
        which protoc-gen-go-grpc || { echo "‚ùå protoc-gen-go-grpc not found"; exit 1; }
        
        echo "‚úÖ All protobuf tools verified and ready"
        
    - name: Generate protobuf code with enhanced diagnostics
      shell: bash
      run: |
        echo "üîß Generating protobuf code with enhanced diagnostics (CI MODE)..."
        
        # Enable verbose diagnostics in CI
        export EPHEMOS_VERBOSE=1
        export CI=true
        export GITHUB_ACTIONS=true
        
        # Ensure Go bin directory is in PATH with highest priority
        export GOBIN=$(go env GOPATH)/bin  
        export PATH="$GOBIN:$PATH:/usr/bin:/usr/local/bin"
        
        echo "üîç Environment Summary:"
        echo "  - Working Directory: $(pwd)"
        echo "  - PATH: $PATH"
        echo "  - GOBIN: $GOBIN"
        echo "  - CI: $CI"
        echo "  - GITHUB_ACTIONS: $GITHUB_ACTIONS"
        echo "  - EPHEMOS_VERBOSE: $EPHEMOS_VERBOSE"
        echo ""
        
        # Check if enhanced generation script exists
        if [ ! -f "scripts/build/generate-proto.sh" ]; then
          echo "‚ùå Enhanced protobuf generation script not found at scripts/build/generate-proto.sh"
          echo "‚ö†Ô∏è Falling back to legacy generation method..."
          
          # Legacy fallback method
          echo "Checking for proto files..."
          if [ ! -f "examples/proto/echo.proto" ]; then
            echo "‚ùå Source proto file examples/proto/echo.proto not found"
            # Create fallback proto file
            echo "‚ö†Ô∏è Creating fallback echo.proto file for CI..."
            mkdir -p examples/proto
            {
              echo 'syntax = "proto3";'
              echo 'package ephemos.echo;'
              echo 'option go_package = "github.com/sufield/ephemos/examples/proto";'
              echo 'service EchoService { rpc Echo(EchoRequest) returns (EchoResponse); }'
              echo 'message EchoRequest { string message = 1; }'
              echo 'message EchoResponse { string message = 1; string from = 2; }'
            } > examples/proto/echo.proto
            echo "‚úÖ Fallback echo.proto created"
          fi
          
          # Direct protoc generation
          rm -f examples/proto/*.pb.go
          if ! protoc \
            --go_out=examples/proto --go_opt=paths=source_relative \
            --go-grpc_out=examples/proto --go-grpc_opt=paths=source_relative \
            -I examples/proto examples/proto/echo.proto; then
            echo "‚ùå Legacy protobuf generation failed"
            exit 1
          fi
        else
          echo "‚úÖ Enhanced protobuf generation script found"
          echo "üöÄ Using enhanced generation with verbose diagnostics..."
          
          # Use the enhanced script with verbose diagnostics
          if ./scripts/build/generate-proto.sh examples/proto examples/proto; then
            echo "‚úÖ Enhanced protobuf generation completed successfully"
          else
            generation_exit_code=$?
            echo "‚ùå Enhanced protobuf generation failed with exit code: $generation_exit_code"
            echo ""
            echo "üìã Diagnostic Information:"
            echo "  - Script Path: scripts/build/generate-proto.sh" 
            echo "  - Proto Directory: examples/proto"
            echo "  - Output Directory: examples/proto"
            echo "  - Verbose Mode: $EPHEMOS_VERBOSE"
            echo ""
            echo "üîç Available Tools Check:"
            which protoc && protoc --version || echo "  - protoc: NOT FOUND"
            which protoc-gen-go || echo "  - protoc-gen-go: NOT FOUND"
            which protoc-gen-go-grpc || echo "  - protoc-gen-go-grpc: NOT FOUND"
            echo ""
            echo "üìÅ Directory Contents:"
            ls -la examples/proto/ || echo "  Proto directory not accessible"
            echo ""
            exit $generation_exit_code
          fi
        fi
        
        # Final verification with detailed reporting
        echo ""
        echo "üîç Final Verification:"
        missing_files=()
        
        if [ ! -f "examples/proto/echo.pb.go" ]; then
          missing_files+=("echo.pb.go")
        else
          pb_size=$(stat -c%s examples/proto/echo.pb.go)
          echo "‚úÖ echo.pb.go generated ($pb_size bytes)"
        fi
        
        if [ ! -f "examples/proto/echo_grpc.pb.go" ]; then
          missing_files+=("echo_grpc.pb.go")  
        else
          grpc_size=$(stat -c%s examples/proto/echo_grpc.pb.go)
          echo "‚úÖ echo_grpc.pb.go generated ($grpc_size bytes)"
        fi
        
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "‚ùå Missing protobuf files: ${missing_files[*]}"
          echo "üìÅ Directory contents after generation:"
          ls -la examples/proto/
          exit 1
        fi
        
        echo ""
        echo "üéâ Protobuf code generation completed successfully!"
        echo "üìÑ Generated Files:"
        ls -la examples/proto/*.pb.go | while read line; do
          echo "   $line"
        done
        
    - name: Clear Go build cache after protobuf generation
      shell: bash  
      run: |
        echo "üßπ Clearing Go build cache after protobuf generation..."
        go clean -cache || true
        go clean -testcache || true
        echo "‚úÖ Build cache cleared to prevent stale module issues"