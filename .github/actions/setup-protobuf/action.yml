name: 'Setup Protocol Buffers'
description: 'Install protobuf compiler, Go protobuf tools, and generate protobuf files'
runs:
  using: 'composite'
  steps:
    - name: Install Protocol Buffers compiler (Ubuntu)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        echo "Installing protobuf compiler for Ubuntu..."
        sudo apt-get update && sudo apt-get install -y protobuf-compiler
        echo "Verifying protoc installation..."
        export PATH="$PATH:/usr/bin"
        which protoc || (echo "‚ùå protoc not found" && exit 1)
        protoc --version || (echo "‚ùå protoc version check failed" && exit 1)
        echo "‚úÖ protoc installed at: $(which protoc)"
        
    - name: Install Protocol Buffers compiler (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        echo "Installing protobuf compiler for macOS..."
        brew install protobuf
        echo "Verifying protoc installation..."
        which protoc || (echo "‚ùå protoc not found" && exit 1)
        protoc --version || (echo "‚ùå protoc version check failed" && exit 1)
        echo "‚úÖ protoc installed at: $(which protoc)"
        
    - name: Install Protocol Buffers compiler (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo "Installing protobuf compiler for Windows..."
        choco install protoc
        echo "Verifying protoc installation..."
        which protoc || (echo "‚ùå protoc not found" && exit 1)
        protoc --version || (echo "‚ùå protoc version check failed" && exit 1)
        echo "‚úÖ protoc installed at: $(which protoc)"
        
    - name: Install Go protobuf tools
      shell: bash
      run: |
        echo "Installing Go protobuf tools..."
        
        # Ensure Go and necessary environment variables are set
        export GO111MODULE=on
        export GOBIN=$(go env GOPATH)/bin
        export PATH="$PATH:$GOBIN"
        
        # Ensure Go is working properly
        go version
        go env GOPATH
        echo "GOBIN: $GOBIN"
        echo "PATH: $PATH"
        
        # Set Go proxy to handle network issues
        go env -w GOPROXY=https://proxy.golang.org,direct
        
        # Ensure Go bin directory exists
        mkdir -p "$GOBIN"
        
        # Clean install protoc-gen-go and protoc-gen-go-grpc with retries
        echo "Installing protoc-gen-go..."
        for i in {1..3}; do
          if go install google.golang.org/protobuf/cmd/protoc-gen-go@latest; then
            echo "‚úÖ protoc-gen-go installed on attempt $i"
            break
          else
            echo "‚ö†Ô∏è protoc-gen-go install attempt $i failed, retrying..."
            if [ $i -eq 3 ]; then
              echo "‚ùå Failed to install protoc-gen-go after 3 attempts"
              exit 1
            fi
            sleep 2
          fi
        done
        
        echo "Installing protoc-gen-go-grpc..."
        for i in {1..3}; do
          if go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest; then
            echo "‚úÖ protoc-gen-go-grpc installed on attempt $i"
            break
          else
            echo "‚ö†Ô∏è protoc-gen-go-grpc install attempt $i failed, retrying..."
            if [ $i -eq 3 ]; then
              echo "‚ùå Failed to install protoc-gen-go-grpc after 3 attempts"
              exit 1
            fi
            sleep 2
          fi
        done
        
        # Add Go bin to PATH for current and future steps
        echo "$GOBIN" >> $GITHUB_PATH
        
        # Verify installation with updated PATH
        export PATH="$GOBIN:$PATH"
        echo "Verifying installation with updated PATH..."
        which protoc-gen-go || { echo "‚ùå protoc-gen-go not found in PATH: $PATH"; ls -la "$GOBIN"; exit 1; }
        which protoc-gen-go-grpc || { echo "‚ùå protoc-gen-go-grpc not found in PATH: $PATH"; ls -la "$GOBIN"; exit 1; }
        
        echo "‚úÖ Go protobuf tools installed successfully"
        echo "protoc-gen-go: $(which protoc-gen-go)"
        echo "protoc-gen-go-grpc: $(which protoc-gen-go-grpc)"
        
        # Make tools executable (in case permissions are wrong)
        chmod +x "$GOBIN/protoc-gen-go" "$GOBIN/protoc-gen-go-grpc" 2>/dev/null || true
        
    - name: Verify all tools are available
      shell: bash
      run: |
        echo "Final verification of all protobuf tools..."
        # Ensure Go bin directory is in PATH (redundant but safe)
        export GOBIN=$(go env GOPATH)/bin
        export PATH="$GOBIN:$PATH:/usr/bin:/usr/local/bin"
        
        echo "Current PATH: $PATH"
        echo "GOBIN: $GOBIN"
        echo "Contents of GOBIN directory:"
        ls -la "$GOBIN" || echo "GOBIN directory not found"
        
        echo "Checking protoc..."
        which protoc && protoc --version || { echo "‚ùå protoc verification failed"; exit 1; }
        
        echo "Checking protoc-gen-go..."
        which protoc-gen-go || { echo "‚ùå protoc-gen-go not found"; exit 1; }
        
        echo "Checking protoc-gen-go-grpc..."  
        which protoc-gen-go-grpc || { echo "‚ùå protoc-gen-go-grpc not found"; exit 1; }
        
        echo "‚úÖ All protobuf tools verified and ready"
        
    - name: Generate protobuf code
      shell: bash
      run: |
        echo "Generating protobuf code (REQUIRED for CI/CD)..."
        # Ensure Go bin directory is in PATH with highest priority
        export GOBIN=$(go env GOPATH)/bin
        export PATH="$GOBIN:$PATH:/usr/bin:/usr/local/bin"
        
        echo "Debug: PATH for protobuf generation: $PATH"
        echo "Debug: GOBIN: $GOBIN"
        
        echo "Current working directory: $(pwd)"
        echo "Repository root contents:"
        ls -la . | head -10
        echo ""
        echo "Checking examples directory..."
        ls -la examples/ || echo "Examples directory not found"
        echo ""
        echo "Checking proto directory..."
        ls -la examples/proto/ || echo "Proto directory not found"
        echo ""
        echo "Git status check for proto file:"
        git ls-files examples/proto/echo.proto || echo "Proto file not tracked in git"
        
        # Check if proto file exists
        if [ ! -f "examples/proto/echo.proto" ]; then
          echo "‚ùå Source proto file examples/proto/echo.proto not found"
          echo "Working directory: $(pwd)"
          echo "Full directory listing:"
          find . -name "echo.proto" -o -name "*.proto" 2>/dev/null || echo "No proto files found"
          
          # Create a minimal fallback proto file
          echo "‚ö†Ô∏è Creating fallback echo.proto file for CI..."
          mkdir -p examples/proto
          {
            echo 'syntax = "proto3";'
            echo ''
            echo 'package ephemos.echo;'
            echo ''
            echo 'option go_package = "github.com/sufield/ephemos/examples/proto";'
            echo ''
            echo '// EchoService provides a simple echo functionality for testing.'
            echo 'service EchoService {'
            echo '  rpc Echo(EchoRequest) returns (EchoResponse);'
            echo '}'
            echo ''
            echo 'message EchoRequest {'
            echo '  string message = 1;'
            echo '}'
            echo ''
            echo 'message EchoResponse {'
            echo '  string message = 1;'
            echo '  string from = 2;'
            echo '}'
          } > examples/proto/echo.proto
          echo "‚úÖ Fallback echo.proto created"
        fi
        
        # Force regeneration of protobuf files
        echo "Removing any existing protobuf files..."
        rm -f examples/proto/*.pb.go
        
        echo "Generating fresh protobuf files..."
        echo "PATH: $PATH"
        echo "GOPATH: $(go env GOPATH)"
        echo "Available tools:"
        which protoc || echo "protoc not found"
        which protoc-gen-go || echo "protoc-gen-go not found"  
        which protoc-gen-go-grpc || echo "protoc-gen-go-grpc not found"
        
        # Try make proto first
        if ! make proto; then
          echo "‚ö†Ô∏è make proto failed, trying direct protoc invocation..."
          # Fallback to direct protoc call
          if ! protoc \
            --go_out=examples/proto \
            --go_opt=paths=source_relative \
            --go-grpc_out=examples/proto \
            --go-grpc_opt=paths=source_relative \
            -I examples/proto \
            examples/proto/echo.proto; then
            echo "‚ùå Both make proto and direct protoc failed"
            exit 1
          fi
        fi
        
        # Verify files were generated
        if [ ! -f "examples/proto/echo.pb.go" ] || [ ! -f "examples/proto/echo_grpc.pb.go" ]; then
          echo "‚ùå Protobuf files were not generated successfully"
          echo "Directory contents:"
          ls -la examples/proto/
          exit 1
        fi
        
        echo "‚úÖ Protobuf code generated successfully"
        echo "Generated files:"
        ls -la examples/proto/*.pb.go
        
    - name: Clear Go build cache after protobuf generation
      shell: bash  
      run: |
        echo "üßπ Clearing Go build cache after protobuf generation..."
        go clean -cache || true
        go clean -testcache || true
        echo "‚úÖ Build cache cleared to prevent stale module issues"