name: 'Setup Protocol Buffers (Simplified)'
description: 'Install protobuf compiler and Go protobuf tools with guaranteed success'
runs:
  using: 'composite'
  steps:
    - name: Install Protocol Buffers compiler
      shell: bash
      run: |
        echo "📦 Installing protobuf compiler..."
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get update && sudo apt-get install -y protobuf-compiler
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew install protobuf
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          choco install protoc
        fi
        
        # Verify protoc installation
        protoc --version || { echo "❌ protoc installation failed"; exit 1; }
        echo "✅ protoc installed: $(protoc --version)"
        
    - name: Setup Go environment and install protobuf tools
      shell: bash
      run: |
        echo "🔧 Setting up Go environment..."
        
        # CRITICAL: Use GOPATH/bin if GOBIN is not set
        if [ -z "$(go env GOBIN)" ]; then
          export GOBIN="$(go env GOPATH)/bin"
        else
          export GOBIN="$(go env GOBIN)"
        fi
        
        # Ensure GOBIN exists
        mkdir -p "$GOBIN"
        
        # Add to PATH for this step
        export PATH="$GOBIN:$PATH"
        
        echo "📋 Go Environment:"
        echo "  GOPATH: $(go env GOPATH)"
        echo "  GOBIN: $GOBIN"
        echo "  PATH: $PATH"
        echo ""
        
        # Install protoc-gen-go
        echo "📥 Installing protoc-gen-go..."
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest || {
          echo "❌ Failed to install protoc-gen-go"
          echo "Trying with verbose output..."
          go install -v google.golang.org/protobuf/cmd/protoc-gen-go@latest
          exit 1
        }
        
        # Install protoc-gen-go-grpc
        echo "📥 Installing protoc-gen-go-grpc..."
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest || {
          echo "❌ Failed to install protoc-gen-go-grpc"
          echo "Trying with verbose output..."
          go install -v google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          exit 1
        }
        
        # Verify installations
        echo ""
        echo "🔍 Verifying installations..."
        
        # Check protoc-gen-go
        if [ -f "$GOBIN/protoc-gen-go" ]; then
          echo "✅ protoc-gen-go installed at: $GOBIN/protoc-gen-go"
          ls -la "$GOBIN/protoc-gen-go"
        else
          echo "❌ protoc-gen-go not found at $GOBIN/protoc-gen-go"
          echo "Searching for protoc-gen-go..."
          find "$HOME" -name "protoc-gen-go" -type f 2>/dev/null | head -5
          exit 1
        fi
        
        # Check protoc-gen-go-grpc
        if [ -f "$GOBIN/protoc-gen-go-grpc" ]; then
          echo "✅ protoc-gen-go-grpc installed at: $GOBIN/protoc-gen-go-grpc"
          ls -la "$GOBIN/protoc-gen-go-grpc"
        else
          echo "❌ protoc-gen-go-grpc not found at $GOBIN/protoc-gen-go-grpc"
          echo "Searching for protoc-gen-go-grpc..."
          find "$HOME" -name "protoc-gen-go-grpc" -type f 2>/dev/null | head -5
          exit 1
        fi
        
        # Export for future steps
        echo "$GOBIN" >> $GITHUB_PATH
        echo "GOBIN=$GOBIN" >> $GITHUB_ENV
        
        echo ""
        echo "✅ All protobuf tools installed successfully!"
        
    - name: Verify all tools are in PATH
      shell: bash
      run: |
        echo "🔍 Final verification..."
        
        # Get GOBIN from previous step
        if [ -n "$GOBIN" ]; then
          export PATH="$GOBIN:$PATH"
        else
          export GOBIN="$(go env GOPATH)/bin"
          export PATH="$GOBIN:$PATH"
        fi
        
        # Check each tool
        echo "Checking protoc..."
        which protoc && protoc --version || { echo "❌ protoc not in PATH"; exit 1; }
        
        echo "Checking protoc-gen-go..."
        which protoc-gen-go || { 
          echo "❌ protoc-gen-go not in PATH"
          echo "PATH: $PATH"
          echo "GOBIN contents:"
          ls -la "$GOBIN"
          exit 1
        }
        
        echo "Checking protoc-gen-go-grpc..."
        which protoc-gen-go-grpc || {
          echo "❌ protoc-gen-go-grpc not in PATH"
          echo "PATH: $PATH"
          echo "GOBIN contents:"
          ls -la "$GOBIN"
          exit 1
        }
        
        echo "✅ All tools verified and ready!"
        
    - name: Generate protobuf files
      shell: bash
      run: |
        echo "🔧 Generating protobuf files..."
        
        # Ensure PATH includes GOBIN
        if [ -n "$GOBIN" ]; then
          export PATH="$GOBIN:$PATH"
        else
          export GOBIN="$(go env GOPATH)/bin"
          export PATH="$GOBIN:$PATH"
        fi
        
        # Check if proto file exists
        if [ ! -f "examples/proto/echo.proto" ]; then
          echo "⚠️ Proto file not found, creating fallback..."
          mkdir -p examples/proto
          cat > examples/proto/echo.proto << 'EOF'
syntax = "proto3";
package ephemos.echo;
option go_package = "github.com/sufield/ephemos/examples/proto";

service EchoService {
  rpc Echo(EchoRequest) returns (EchoResponse);
}

message EchoRequest {
  string message = 1;
}

message EchoResponse {
  string message = 1;
  string from = 2;
}
EOF
          echo "✅ Created fallback echo.proto"
        fi
        
        # Generate Go code
        echo "Running protoc..."
        protoc --go_out=examples/proto --go_opt=paths=source_relative \
               --go-grpc_out=examples/proto --go-grpc_opt=paths=source_relative \
               -I examples/proto examples/proto/echo.proto || {
          echo "❌ Protoc generation failed"
          echo "Debugging information:"
          echo "  PATH: $PATH"
          echo "  which protoc: $(which protoc)"
          echo "  which protoc-gen-go: $(which protoc-gen-go)"
          echo "  which protoc-gen-go-grpc: $(which protoc-gen-go-grpc)"
          exit 1
        }
        
        # Verify generated files
        echo ""
        echo "📄 Verifying generated files..."
        if [ -f "examples/proto/echo.pb.go" ]; then
          echo "✅ echo.pb.go generated ($(wc -l < examples/proto/echo.pb.go) lines)"
        else
          echo "❌ echo.pb.go not generated"
          exit 1
        fi
        
        if [ -f "examples/proto/echo_grpc.pb.go" ]; then
          echo "✅ echo_grpc.pb.go generated ($(wc -l < examples/proto/echo_grpc.pb.go) lines)"
        else
          echo "❌ echo_grpc.pb.go not generated"
          exit 1
        fi
        
        echo ""
        echo "🎉 Protobuf generation completed successfully!"