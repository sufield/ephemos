// Code generated by mockery. DO NOT EDIT manually.
// Package mocks provides mock implementations for testing.
package mocks

import (
	"context"

	"github.com/spiffe/go-spiffe/v2/spiffeid"
	"github.com/spiffe/go-spiffe/v2/svid/x509svid"
	"github.com/stretchr/testify/mock"
	"github.com/sufield/ephemos/internal/core/domain"
	"github.com/sufield/ephemos/internal/core/ports"
)

// MockIdentityProviderPort is a mock implementation of IdentityProviderPort.
type MockIdentityProviderPort struct {
	mock.Mock
}

// Ensure mock implements the interface
var _ ports.IdentityProviderPort = (*MockIdentityProviderPort)(nil)

// GetServiceIdentity mocks the GetServiceIdentity method.
func (m *MockIdentityProviderPort) GetServiceIdentity(ctx context.Context) (spiffeid.ID, error) {
	args := m.Called(ctx)

	var r0 spiffeid.ID
	if args.Get(0) != nil {
		r0 = args.Get(0).(spiffeid.ID)
	}

	return r0, args.Error(1)
}

// GetCertificate mocks the GetCertificate method.
func (m *MockIdentityProviderPort) GetCertificate(ctx context.Context) (*domain.Certificate, error) {
	args := m.Called(ctx)

	var r0 *domain.Certificate
	if args.Get(0) != nil {
		r0 = args.Get(0).(*domain.Certificate)
	}

	return r0, args.Error(1)
}

// GetSVID mocks the GetSVID method.
func (m *MockIdentityProviderPort) GetSVID(ctx context.Context) (*x509svid.SVID, error) {
	args := m.Called(ctx)

	var r0 *x509svid.SVID
	if args.Get(0) != nil {
		r0 = args.Get(0).(*x509svid.SVID)
	}

	return r0, args.Error(1)
}

// RefreshIdentity mocks the RefreshIdentity method.
func (m *MockIdentityProviderPort) RefreshIdentity(ctx context.Context) error {
	args := m.Called(ctx)
	return args.Error(0)
}

// WatchIdentityChanges mocks the WatchIdentityChanges method.
func (m *MockIdentityProviderPort) WatchIdentityChanges(ctx context.Context) (<-chan *x509svid.SVID, error) {
	args := m.Called(ctx)

	var r0 <-chan *x509svid.SVID
	if args.Get(0) != nil {
		r0 = args.Get(0).(<-chan *x509svid.SVID)
	}

	return r0, args.Error(1)
}

// Close mocks the Close method.
func (m *MockIdentityProviderPort) Close() error {
	args := m.Called()
	return args.Error(0)
}

// NewMockIdentityProviderPort creates a new mock instance.
func NewMockIdentityProviderPort() *MockIdentityProviderPort {
	return &MockIdentityProviderPort{}
}
