# CI/CD Makefile for Ephemos
# Handles continuous integration and deployment tasks
.PHONY: ci-setup ci-lint ci-test ci-security ci-build ci-all clean-cache

# Setup environment for CI
ci-setup: proto
	@echo "🧹 Cleaning Go build cache (aggressive)..."
	go clean -cache
	go clean -modcache || true
	go clean -testcache
	@echo "🔧 Setting Go module proxy for reliable downloads..."
	go env -w GOPROXY=https://proxy.golang.org,direct || true
	@echo "📦 Refreshing module dependencies..."
	go mod download
	go mod verify
	@echo "🔍 Verifying package compilation..."
	@# Test compile all packages to catch early issues
	@go build ./pkg/ephemos || (echo "❌ pkg/ephemos compilation failed" && exit 1)
	@go build ./internal/... || (echo "❌ internal packages compilation failed" && exit 1)
	@echo "✅ CI setup completed - protobuf files generated, cache cleared, and packages verified"

# Run linting checks
ci-lint:
	@echo "Running linting checks..."
	go fmt ./...
	go vet ./...
	@./scripts/ci/lint.sh
	@echo "Linting checks completed!"

# Run all tests with coverage and detailed reporting
ci-test:
	@echo "🧪 Running tests with coverage and detailed reporting..."
	@echo "================================================"
	@echo ""
	@# Run tests with JSON output for parsing
	@go test -race -coverprofile=coverage.out -covermode=atomic -json ./... > test-results.json 2>&1 || true
	@echo ""
	@echo "📊 TEST SUMMARY"
	@echo "================================================"
	@# Parse test results and show summary
	@go run scripts/test-summary/main.go test-results.json || \
		(echo "Using fallback summary..." && \
		 echo "Total packages tested: $$(go list ./... | wc -l)" && \
		 echo "Test output:" && tail -20 test-results.json)
	@echo ""
	@# Generate coverage report
	@go tool cover -html=coverage.out -o coverage.html 2>/dev/null || echo "⚠️ Coverage report generation skipped"
	@echo "✅ Test run completed! Full results in test-results.json"
	@echo "📈 Coverage report: coverage.html"
	@# Exit with failure if tests failed
	@grep -q '"Action":"fail"' test-results.json && exit 1 || exit 0

# Run security checks
ci-security:
	@echo "Running security checks..."
	@./scripts/ci/security-checks.sh
	@echo "Security checks completed!"

# Build all targets
ci-build: clean-cache build examples
	@echo "All builds completed successfully!"

# Clean all caches before building
clean-cache:
	@echo "🧹 Cleaning all Go caches before build..."
	go clean -cache
	go clean -testcache
	go clean -modcache || true
	@echo "🗑️  Removing additional cache directories..."
	rm -rf ~/.cache/go-build 2>/dev/null || true
	rm -rf $(go env GOCACHE) 2>/dev/null || true
	@echo "✅ All caches cleared"

# Run all CI checks
ci-all: ci-lint ci-test ci-security ci-build
	@echo "All CI checks completed successfully!"

# Help
ci-help:
	@echo "Ephemos CI/CD Targets:"
	@echo ""
	@echo "  make ci-setup     - Setup CI environment"
	@echo "  make ci-lint      - Run linting checks"
	@echo "  make ci-test      - Run tests with coverage"
	@echo "  make ci-security  - Run security checks"
	@echo "  make ci-build     - Build all targets"
	@echo "  make ci-all       - Run all CI checks"